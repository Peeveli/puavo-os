#!/usr/bin/python3

# Parse the command line, figure out program settings and then launch the menu.

import argparse

from constants import LANGUAGES


# Some kind of a help text
epilog = """
Development versus production mode
----------------------------------
PuavoMenu, by default, assumes it's running in development mode. To override
this, use the --prod command line switch. When running in production mode, you
also need to specify the log file with --log (console logging is only available
in development mode, but file logging can be used in development mode if
desired), and --autohide to actually make the menu window hide itself when it
loses focus. --autohide is never enabled by default, because it complicates
development considerably.

Socket names and IPC commands
-----------------------------
PuavoMenu uses a Unix domain socket for IPC. You can use it to send simple
commands to it. See send_command for more information. The main PuavoMenu
instance uses a socket file ~/.config/puavomenu/socket_(hostname); if
you're running other copies of PuavoMenu, you *need* to use other socket
names, so the commands you send to your copies do not interfere with the
system menu.

Known IPC commands are:
    show: Show the menu
    hide: Hide the menu
    toggle: Show or hide the menu, depending on its current visibility

'show' and 'toggle' also accept a position parameter, which tells the
menu where the window should be shown at. Known positions are:

    center: Center the window around the mouse cursor
    corner <X> <Y>: Position the lower left corner at (X, Y)

Examples on positioning:

    show corner 115 68: This shows the window and moves it so that the
                        lower left corner is located at (115, 68).
    show corner: Shows the window at whatever position it happens to
                 be at.
    show center: Shows the window and centers it around the mouse cursor.

Language codes
--------------
PuavoMenu supports multiple languages. The language code is simply
a two-letter code, like "fi", or "en". You can use --lang=<code> to
specify which language you want to use. If --lang is omitted, PuavoMenu
looks up LANG and GDM_LANG environment variables (in that order) and
takes the first two letters form its value, lowercases them, and then
compares them to the list of known languages. If the environment
variable(s) are missing, or the code is invalid, the language defaults
to English (en). Accepted language codes are:
    $LANGS
"""

epilog = epilog.replace('$LANGS', ', '.join(LANGUAGES))

# ------------------------------------------------------------------------------
# Parse the command-line arguments

parser = argparse.ArgumentParser(
    formatter_class=argparse.RawDescriptionHelpFormatter,
    epilog=epilog)

parser.add_argument('--prod',
                    action='store_true',
                    required=False,
                    help='enable production mode; by default PuavoMenu is always in development mode')

parser.add_argument('--log',
                    type=str,
                    required=False,
                    help='log file name (logs to console if omitted, required in production mode)')

parser.add_argument('--autohide',
                    action='store_true',
                    required=False,
                    help='enable window autohide (not automatically implied in production mode!)')

parser.add_argument('--lang',
                    type=str,
                    required=False,
                    default=None,   # force autodetection
                    help='language code (see documentation)')

required = parser.add_argument_group('required arguments')

required.add_argument('--res_dir',
                      required=True,
                      type=str,
                      help='location of PuavoMenu\'s own resources')

required.add_argument('--menu_dir',
                      required=True,
                      type=str,
                      help='location of the menu data')

required.add_argument('--user_dir',
                      required=True,
                      type=str,
                      help='location of user-specific data (faves, etc.)')

required.add_argument('--socket',
                      required=True,
                      help='IPC command socket name')

args = parser.parse_args()

# ------------------------------------------------------------------------------
# Setup logging

if args.prod and not args.log:
    print('\nERROR: You must use the --log switch in production mode!')
    exit(1)

import logging

if args.log:
    # log to file
    logging.basicConfig(filename=args.log,
                        format='%(asctime)s %(levelname)s: %(message)s',
                        level=logging.DEBUG)
else:
    # log to console
    logging.basicConfig(format='%(asctime)s %(levelname)s: %(message)s',
                        level=logging.DEBUG)

# ------------------------------------------------------------------------------
# Create settings and detect the environment

import os
import os.path

from settings import SETTINGS

SETTINGS.prod_mode = args.prod
SETTINGS.autohide = args.autohide
SETTINGS.res_dir = os.path.join(args.res_dir, '')
SETTINGS.menu_dir = os.path.join(args.menu_dir, '')
SETTINGS.user_dir = os.path.join(args.user_dir, '')
SETTINGS.socket = args.socket

logging.info('Logging starts')
logging.info('This is PuavoMenu v0.7 (c) Opinsys Oy 2017-2019')

if args.lang:
    # Override autodetection
    SETTINGS.language = args.lang.lower()
else:
    # Autodetect from system
    if 'LANG' in os.environ:
        SETTINGS.language = os.environ['LANG'][0:2].lower()
    elif 'GDM_LANG' in os.environ:
        SETTINGS.language = os.environ['GDM_LANG'][0:2].lower()

# Regardless of where the language code comes from we validate it
if SETTINGS.language not in LANGUAGES:
    logging.error('Invalid language code "%s", defaulting to "en"',
                  SETTINGS.language)
    SETTINGS.language = 'en'

logging.info('Language code......: "%s"', SETTINGS.language)

if args.log:
    logging.info('Log (this) file....: "%s"', args.log)

logging.info('Resource directory.: "%s"', SETTINGS.res_dir)
logging.info('Menu data directory: "%s"', SETTINGS.menu_dir)
logging.info('User directory.....: "%s"', SETTINGS.user_dir)
logging.info('IPC socket name....: "%s"', SETTINGS.socket)

# Detect the non-configurable settings
SETTINGS.detect_environment()

logging.info('Desktop directory..: "%s"', SETTINGS.desktop_dir)

if not SETTINGS.prod_mode:
    logging.info('*** Running in DEVELOPMENT mode ***')

if SETTINGS.autohide:
    logging.info('*** Autohide enabled ***')

# ------------------------------------------------------------------------------
# And go!

import time
import syslog
import traceback

logging.info('=' * 50)

try:
    import_start = time.clock()
    from utils import log_elapsed_time
    import main
    import_end = time.clock()

    log_elapsed_time('Main import time', import_start, import_end)

    main.run_puavomenu()
except Exception as exception:
    # This is bad. Very bad. The exception bubbled all the way up to here,
    # so this is fatal.
    logging.fatal(str(exception), exc_info=True)

    if SETTINGS.prod_mode:
        # Log fatal exceptions to to syslog
        syslog.syslog(syslog.LOG_CRIT, 'Top-level exception caught in puavomenu!')
        syslog.syslog(syslog.LOG_CRIT, traceback.format_exc())

logging.info('=' * 50)

# ------------------------------------------------------------------------------
# Clean exit

logging.info('Shutdown complete')
logging.info('Logging ends')
logging.shutdown()

exit(0)
