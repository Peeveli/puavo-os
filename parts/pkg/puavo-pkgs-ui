#!/usr/bin/python3

import gi
import os
import subprocess

gi.require_version('Gtk', '3.0')
from gi.repository import GLib
from gi.repository import GObject
from gi.repository import Gtk

class PuavoPkg:
    def __init__(self, pkgname):
        self.pkgname = pkgname
        self.command = None
        self.install_log = []


    def lookup_fields(self):
        self.description = self.field('Description')
        self.legend      = self.field('Legend')
        self.license     = self.license()


    def install(self, widget):
        puavo_conf_key = 'puavo.pkg.%s' % self.pkgname

        cmd = [ 'sudo', '/usr/sbin/puavo-conf-local', puavo_conf_key, 'latest' ]
        subprocess.check_output(cmd).rstrip().decode('utf-8')

        cmd = [ '/usr/bin/sudo', '/usr/sbin/puavo-pkg-update', self.pkgname ]
        (pid, stdin, stdout, stderr) \
          = GObject.spawn_async(cmd, flags=GLib.SPAWN_DO_NOT_REAP_CHILD,
              standard_output=True, standard_error=True)

        self.pkg_update_pid    = pid
        self.pkg_update_stdout = stdout
        self.pkg_update_stderr = stderr

        for fd in [ stdout, stderr ]:
            GObject.io_add_watch(fd, GObject.IO_HUP|GObject.IO_IN,
                                 self.pkg_update_callback, os.fdopen(fd))


    def pkg_update_callback(self, fd, condition, channel):
        if condition == GObject.IO_HUP:
            channel.close()
            if fd == self.pkg_update_stdout:
                self.pkg_update_stdout = None
            else:
                self.pkg_update_stderr = None

            if not self.pkg_update_stdout and not self.pkg_update_stderr:
                (pid, status) = os.waitpid(self.pkg_update_pid, 0)
                if status == 0:
                    # XXX
                    print("OK")
                else:
                    # XXX
                    print("ERROR")
                print(''.join(self.install_log))

            return False

        if condition == GObject.IO_IN:
            self.install_log.append( channel.readline() )

        return True


    def add_to_grid(self, grid, previous_pkg):
        try:
            self.lookup_fields()
        except:
            return False

        self.label = Gtk.Label(label=self.legend)
        self.label.set_property('tooltip-text', self.description)
        if not previous_pkg:
             grid.add(self.label)
        else:
             grid.attach_next_to(self.label, previous_pkg.label,
               Gtk.PositionType.BOTTOM, 1, 1)

        license_link = Gtk.Label()
        license_link.set_markup('<a href="%s">lisenssiehdot</a>' % self.license)
        grid.attach_next_to(license_link, self.label, Gtk.PositionType.RIGHT,
            1, 1)

        button = Gtk.ToggleButton(label='INSTALL')
        button.connect('toggled', self.install)
        grid.attach_next_to(button, license_link, Gtk.PositionType.RIGHT, 1, 1)

        return True


    def cmd_output(self, cmd):
        return subprocess.check_output(cmd).rstrip().decode('utf-8')


    def field(self, fieldname):
        # XXX would be faster to skip puavo-pkg
        cmd = [ 'puavo-pkg', 'show', '-F', fieldname, self.pkgname ]
        return self.cmd_output(cmd)


    def license(self):
        # XXX would be faster to skip puavo-pkg
        cmd = [ 'puavo-pkg', 'license', self.pkgname ]
        return self.cmd_output(cmd)


def on_button_clicked(widget):
    print('button clicked')

def puavoconf_get(puavoconf_key):
  return subprocess.check_output([ 'puavo-conf', puavoconf_key ]).rstrip() \
                   .decode('utf-8')

pkglist = puavoconf_get('puavo.pkgs.ui.pkglist').split()

win = Gtk.Window()
win.connect('destroy', Gtk.main_quit)
win.set_border_width(10)

box_outer = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)
win.add(box_outer)

button = Gtk.Button(label='INSTALL ALL')
button.connect('clicked', on_button_clicked)
box_outer.pack_start(button, True, True, 0)

grid = Gtk.Grid()
box_outer.pack_start(grid, True, True, 0)

previous_pkg = None

for pkgname in pkglist:
    pkg = PuavoPkg(pkgname)
    if pkg.add_to_grid(grid, previous_pkg):
        previous_pkg = pkg

# XXX if previous_pkg is None, there are no packages to install and an error
# XXX should be presented to user

win.show_all()

Gtk.main()
