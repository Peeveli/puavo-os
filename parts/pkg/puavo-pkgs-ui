#!/usr/bin/python3

import fcntl
import gi
import os
import signal
import subprocess
import sys

from enum import Enum

gi.require_version('Gtk', '3.0')
from gi.repository import GLib
from gi.repository import GObject
from gi.repository import Gtk

class PkgState(Enum):
    ABSENT          = 1
    INSTALLED       = 2
    INSTALL_ERROR   = 3
    INSTALLING      = 4
    INSTALL_SUCCESS = 5
    REMOVE_ERROR    = 6
    REMOVE_SUCCESS  = 7
    REMOVING        = 8


class PuavoPkg:
    def __init__(self, pkgname):
        self.action_button_conn = None
        self.pkgname            = pkgname
        self.pkg_state          = None
        self.pkg_update_pid     = None


    def lookup_pkg_fields(self):
        self.description = self.field('description')
        self.legend      = self.field('legend')
        self.license     = self.license()


    def set_puavoconf(self, value):
        puavo_conf_key = 'puavo.pkg.%s' % self.pkgname

        cmd = [ 'sudo', '/usr/sbin/puavo-conf-local', puavo_conf_key, value ]
        subprocess.check_output(cmd).rstrip().decode('utf-8')


    def run_puavo_pkg_update(self):
        cmd = [ '/usr/bin/sudo',
                '/usr/sbin/puavo-pkg-update-from-gui',
                self.pkgname ]
        (pid, stdin, stdout, stderr) = GObject.spawn_async(cmd,
            flags=GLib.SPAWN_DO_NOT_REAP_CHILD|GLib.SPAWN_STDERR_TO_DEV_NULL,
            standard_input=True, standard_output=True)

        self.pkg_update_pid   = pid
        self.pkg_update_stdin = os.fdopen(stdin, 'w')

        fl = fcntl.fcntl(stdout, fcntl.F_GETFL)
        fcntl.fcntl(stdout, fcntl.F_SETFL, fl | os.O_NONBLOCK)
        GObject.io_add_watch(stdout, GObject.IO_HUP|GObject.IO_IN,
                             self.pkg_update_callback, os.fdopen(stdout))


    def install_pkg(self, widget):
        if self.pkg_update_pid:
            return

        self.set_ui_state(PkgState.INSTALLING)
        self.set_puavoconf('latest')
        self.run_puavo_pkg_update()


    def cancel_installation(self, widget):
        if self.pkg_update_stdin:
            print('quit', file=self.pkg_update_stdin, flush=True)


    def remove_pkg(self, widget):
        self.set_ui_state(PkgState.REMOVING)
        self.set_puavoconf('remove')
        self.run_puavo_pkg_update()


    def pulse_progressbar(self):
        if self.pkg_update_pid:
            self.progressbar.pulse()
            return True

        return False


    def set_ui_state(self, new_state):
        if self.action_button_conn:
            self.action_button.disconnect(self.action_button_conn)
            self.action_button_conn = None

        self.action_button.set_sensitive( new_state != PkgState.REMOVING )
        self.pkg_state = new_state
        self.progressbar.set_fraction(0.0)

        if new_state in [ PkgState.ABSENT, PkgState.REMOVE_SUCCESS ]:
            self.progressbar.set_text('NOT INSTALLED')
            self.action_button.set_label('INSTALL')
            self.action_button_conn \
              = self.action_button.connect('clicked', self.install_pkg)

        elif new_state == PkgState.INSTALLING:
            self.progressbar.set_text('INSTALLING')
            self.action_button.set_label('CANCEL')
            self.action_button_conn \
              = self.action_button.connect('clicked', self.cancel_installation)
            GObject.timeout_add(100, self.pulse_progressbar)

        elif new_state == PkgState.INSTALL_ERROR:
            self.progressbar.set_text('INSTALLATION ERROR')
            self.action_button.set_label('INSTALL')
            self.action_button_conn \
              = self.action_button.connect('clicked', self.install_pkg)

        elif new_state in [ PkgState.INSTALL_SUCCESS, PkgState.INSTALLED ]:
            self.progressbar.set_text('INSTALLED')
            self.action_button.set_label('REMOVE')
            self.action_button_conn \
              = self.action_button.connect('clicked', self.remove_pkg)

        elif new_state == PkgState.REMOVING:
            self.progressbar.set_text('REMOVING')
            GObject.timeout_add(100, self.pulse_progressbar)

        elif new_state == PkgState.REMOVE_ERROR:
            self.progressbar.set_text('ERROR IN REMOVING')
            self.action_button.set_label('INSTALL')
            self.action_button_conn \
              = self.action_button.connect('clicked', self.install_pkg)


    def pkg_update_callback(self, fd, condition, channel):
        if condition & GObject.IO_IN:
            logtext = channel.read()
            self.install_log_textview.get_buffer().insert_at_cursor(logtext)

        if condition & GObject.IO_HUP:
            channel.close()

            (pid, status) = os.waitpid(self.pkg_update_pid, 0)

            if self.pkg_state == PkgState.REMOVING:
                if status == 0:
                    self.set_ui_state(PkgState.REMOVE_SUCCESS)
                else:
                    self.set_ui_state(PkgState.REMOVE_ERROR)
            else:
                if status == 0:
                    self.set_ui_state(PkgState.INSTALL_SUCCESS)
                else:
                    self.set_ui_state(PkgState.INSTALL_ERROR)

            self.pkg_update_pid   = None
            self.pkg_update_stdin = None

            return False

        return True


    def add_to_grid(self, grid, previous_pkg):
        # package may not be available, so skip those packages
        try:
            self.lookup_pkg_fields()
        except:
            return False

        self.label = Gtk.Label(label=self.legend)
        self.label.set_property('tooltip-text', self.description)
        if not previous_pkg:
             grid.add(self.label)
        else:
             grid.attach_next_to(self.label, previous_pkg.label,
               Gtk.PositionType.BOTTOM, 1, 1)

        license_link = Gtk.Label()
        license_link.set_markup('<a href="%s">lisenssiehdot</a>' % self.license)
        grid.attach_next_to(license_link, self.label, Gtk.PositionType.RIGHT,
            1, 1)

        self.action_button = Gtk.Button()
        grid.attach_next_to(self.action_button, license_link,
                            Gtk.PositionType.RIGHT, 1, 1)

        self.progressbar = Gtk.ProgressBar()
        self.progressbar.set_show_text(True)
        grid.attach_next_to(self.progressbar, self.action_button,
                            Gtk.PositionType.RIGHT, 1, 1)

        self.install_log_win = Gtk.Window()
        self.install_log_win.set_default_geometry(800, 220)
        self.install_log_win.set_title('puavo-pkgs-ui / %s' % self.pkgname)
        self.install_log_textview = Gtk.TextView()
        self.install_log_textview.set_border_width(10)
        self.install_log_textview.set_cursor_visible(False)
        self.install_log_textview.set_editable(False)

        scrolled_win = Gtk.ScrolledWindow()
        scrolled_win.add(self.install_log_textview)

        self.install_log_win.add(scrolled_win)

        self.toggle_log_button = Gtk.ToggleButton(label='show log')
        self.toggle_log_button.connect('clicked', self.show_or_hide_log)
        grid.attach_next_to(self.toggle_log_button, self.progressbar,
                            Gtk.PositionType.RIGHT, 1, 1)

        self.install_log_win.connect('destroy',
          lambda x: self.toggle_log_button.set_active(False))

        installed_link = os.path.join('/var/lib/puavo-pkg/installed',
                                      self.pkgname)
        if os.path.exists(installed_link):
            self.set_ui_state(PkgState.INSTALLED)
        else:
            self.set_ui_state(PkgState.ABSENT)

        return True


    def show_or_hide_log(self, widget):
        if widget.get_active():
            self.install_log_win.show_all()
        else:
            self.install_log_win.hide()


    def field(self, fieldname):
        path = '/var/lib/puavo-pkg/available/%s/%s' % (self.pkgname, fieldname)
        with open(path) as file:
            return file.read().rstrip()


    def license(self):
        path = '/var/lib/puavo-pkg/available/%s/license' % self.pkgname
        if not os.path.exists(path):
            raise ValueError('license not found')
        return 'file://%s' % path


def install_all_packages(widget, pkg_list):
    possible_to_install_states = [ PkgState.ABSENT,
                                   PkgState.INSTALL_ERROR,
                                   PkgState.REMOVE_ERROR,
                                   PkgState.REMOVE_SUCCESS ]
    for pkg in pkg_list:
        if pkg.pkg_state in possible_to_install_states:
            pkg.action_button.clicked()


def puavoconf_get(puavoconf_key):
    return subprocess.check_output([ 'puavo-conf', puavoconf_key ]).rstrip() \
                     .decode('utf-8')


pkg_list = []
for pkgname in puavoconf_get('puavo.pkgs.ui.pkglist').split():
    pkg_list.append( PuavoPkg(pkgname) )

win = Gtk.Window()
win.connect('destroy', Gtk.main_quit)
win.set_border_width(10)
win.set_default_geometry(780, 700)

box_outer = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)
win.add(box_outer)

button = Gtk.Button(label='ACCEPT ALL LICENSES AND INSTALL ALL SOFTWARE')
button.connect('clicked', lambda w: install_all_packages(w, pkg_list))
box_outer.pack_start(button, False, False, 0)

grid = Gtk.Grid()
grid.set_column_spacing(10)
grid.set_row_spacing(5)
scrolled_win = Gtk.ScrolledWindow()
scrolled_win.add(grid)
box_outer.pack_start(scrolled_win, True, True, 0)

previous_pkg = None
for pkg in pkg_list:
    if pkg.add_to_grid(grid, previous_pkg):
        previous_pkg = pkg

if not previous_pkg:
    dialog = Gtk.MessageDialog(win, 0, Gtk.MessageType.ERROR,
       Gtk.ButtonsType.CANCEL, 'ERROR: no packages to install')
    dialog.run()
    sys.exit(1)

win.show_all()

Gtk.main()
