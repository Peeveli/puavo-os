#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import datetime
import errno
import fcntl
import filecmp
import gettext
import gi
import glob
import json
import os
import re
import requests
import shutil
import signal
import subprocess
import sys
import syslog
import threading
import time

gi.require_version('AppIndicator3', '0.1')
gi.require_version('Gtk', '3.0')
gi.require_version('Notify', '0.7')

from gi.repository import AppIndicator3
from gi.repository import Gdk
from gi.repository import Gio
from gi.repository import GLib
from gi.repository import GObject
from gi.repository import Gtk
from gi.repository import Notify

from requests.auth import HTTPBasicAuth

gettext.bindtextdomain('puavo-ers-applet', '/usr/share/locale')
gettext.textdomain('puavo-ers-applet')
_tr = gettext.gettext

KTP_JAKO_DIR       = os.path.join(os.environ['HOME'], 'ktp-jako')
EXAMS_ARCHIVE_DIR  = os.path.join(KTP_JAKO_DIR, 'Arkisto')
EXAMS_DIR          = os.path.join(KTP_JAKO_DIR, '.exams')
EXAMS_JSON_FILE    = os.path.join(KTP_JAKO_DIR, '.exams.json')
EXAMS_UPCOMING_DIR = os.path.join(KTP_JAKO_DIR, 'Tulevat')

exam_scheduler_lock = threading.Lock()
current_exams = []
current_zip_name = None


def puavoconf_get(puavoconf_key):
  return subprocess.check_output([ 'puavo-conf', puavoconf_key ]).rstrip() \
                   .decode('utf-8')


def rm_f(path, with_logging=True):
  try:
    os.unlink(path)
    if with_logging:
      syslog.syslog(syslog.LOG_INFO, 'removed %s' % path)
  except OSError as e:
    if e.errno != errno.ENOENT:
      raise e


class CurrentZipNotReady(Exception):
  pass


class PuavoErsApplet:
  NAKSU_ORIGIN_PATH = '/opt/abitti-naksu/naksu'
  PUAVO_ERS_DIR = os.path.join(os.environ['HOME'], '.puavo', 'puavo-ers')
  NAKSU_BIN_PATH = os.path.join(PUAVO_ERS_DIR, 'naksu')

  def __init__(self):
    self.indicator \
      = AppIndicator3.Indicator.new('puavo-ers-applet',
          '/usr/share/icons/Faenza/emblems/64/emblem-default.png',
          AppIndicator3.IndicatorCategory.SYSTEM_SERVICES)
    self.indicator.set_status(AppIndicator3.IndicatorStatus.ACTIVE)

    self.clipboard = Gtk.Clipboard.get(Gdk.SELECTION_CLIPBOARD)

    # XXX do we need this?
    Notify.init('puavo-ers-applet')

    os.makedirs(self.PUAVO_ERS_DIR, exist_ok=True)

    self.menu = Gtk.Menu()
    self.old_exams = []
    self.menuitems = []

    self.indicator.set_menu(self.menu)
    self.latest_chosen_password = None

    self.menu.show_all()

    self.exam_sync = PuavoErsExamSync()
    self.exam_sync.start()

    self.exams_server_helper = PuavoErsServerHelper()
    self.exams_server_helper.start()

    self.exam_sorter = PuavoErsExamSorter()
    self.exam_sorter.start()

    # XXX Disabled for now, this needs fixing, but the KTPAPI mechanism
    # XXX running in exam server needs fixing first.
    # self.exams_scheduler = PuavoErsExamScheduler()
    # self.exams_scheduler.start()

    if not os.path.exists(self.NAKSU_BIN_PATH):
      shutil.copy2(self.NAKSU_ORIGIN_PATH, self.NAKSU_BIN_PATH)


  def main(self):
    self.run_naksu()
    GObject.timeout_add_seconds(1, self.update_decrypt_codes)
    Gtk.main()


  def run_naksu(self):
    syslog.syslog(syslog.LOG_NOTICE, 'starting up naksu')

    cmd = [ '/usr/bin/terminator', '-T', 'naksu terminal',
            '--working-directory=' + self.PUAVO_ERS_DIR,
            '-x', './naksu', '--self-update=enabled' ]
    (pid, stdin, stdout, stderr) = GObject.spawn_async(cmd,
      flags=GLib.SPAWN_DO_NOT_REAP_CHILD|GLib.SPAWN_STDERR_TO_DEV_NULL,
      standard_input=True, standard_output=True)

    self.naksu_pid = pid

    fl = fcntl.fcntl(stdout, fcntl.F_GETFL)
    fcntl.fcntl(stdout, fcntl.F_SETFL, fl | os.O_NONBLOCK)
    GObject.io_add_watch(stdout, GObject.IO_HUP|GObject.IO_IN,
                         self.handle_naksu, os.fdopen(stdout))


  def handle_naksu(self, fd, condition, channel):
    try:
      if condition & GObject.IO_IN:
        channel.read()

      if condition & GObject.IO_HUP:
        channel.close()
        (pid, status) = os.waitpid(self.naksu_pid, 0)
        if status != 0:
          syslog.syslog(syslog.LOG_ERR,
                        'naksu pid %d returned exit status %s' % (pid, status))
        else:
          syslog.syslog(syslog.LOG_NOTICE, 'naksu exited with success')

        time.sleep(3)
        self.run_naksu()

    except Exception as e:
      syslog.syslog(syslog.LOG_ERR, 'error when handling naksu: %s' % e)
      return False

    return True


  def update_decrypt_codes(self, force_update=False):
    error = None
    try:
      with open(EXAMS_JSON_FILE) as file:
        new_exams = json.load(file)
        if (force_update or self.old_exams != new_exams):
          self.update_decrypt_codes_in_ui(new_exams)
        self.old_exams = new_exams
    except OSError as e:
      if e.errno != errno.ENOENT:
        error = e
    except Exception as e:
      error = e

    if error:
      # XXX should user be notified?
      syslog.syslog(syslog.LOG_ERR,
                    'error when updating decrypt codes: %s' % error)

    return True


  def update_decrypt_codes_in_ui(self, new_exams):
    # We can show decrypt codes for future exams as well, in case user
    # wants to try those out manually.  Showing them for old exams is probably
    # just a distraction.

    syslog.syslog(syslog.LOG_INFO, 'updating decrypt codes in UI')

    self.exams_by_widgets = {}
    for button in self.menuitems:
      button.destroy()

    labels_and_exams_list = []
    labels_table = {}

    for exam in new_exams:
      if not re.match('^exam_.*\.meb$', exam['file_name']):
        syslog.syslog(syslog.LOG_WARNING,
          'not showing password for exam %s' % exam['file_name'])
        continue

      # do not show passwords for old exams
      exam_end_time = datetime.datetime.fromtimestamp(exam['end_time'])
      if exam_end_time < datetime.datetime.now():
        continue

      label = "%s (%s)" % (exam['decrypt_code'], exam['file_name'])
      # Exams may have duplicates, in case there is one exam with multiple
      # start_time/end_times.  Weed out duplicates based on labels_table.
      if label in labels_table:
        continue
      labels_table[label] = 1

      if exam['decrypt_code'] == self.latest_chosen_password:
        label = '***** %s *****' % label

      labels_and_exams_list.append({ 'exam': exam, 'label': label })

    if len(labels_and_exams_list) > 24:
      # we can not fit too many labels on the applet menu,
      # so open a new window in case we have very many exams
      button = Gtk.MenuItem( _tr('Open decrypt codes window') )
      decrypt_codes_window = DecryptCodesWindow(self, labels_and_exams_list)
      button.connect('activate', decrypt_codes_window.open)
      button.show()
      self.menu.append(button)
      self.menuitems.append(button)
    else:
      instructions = Gtk.MenuItem(
                       _tr('Click passphrase below put it into clipboard'))
      instructions.set_sensitive(False)
      instructions.show()
      self.menuitems.append(instructions)
      self.menu.append(instructions)

      separator = Gtk.SeparatorMenuItem()
      separator.show()
      self.menuitems.append(separator)
      self.menu.append(separator)

      for le in labels_and_exams_list:
        button = Gtk.MenuItem(le['label'])
        self.exams_by_widgets[button] = le['exam']
        button.connect('activate', self.password_triggered)
        button.show()
        self.menu.append(button)
        self.menuitems.append(button)


  def password_triggered(self, widget):
    password = self.exams_by_widgets[widget]['decrypt_code']
    self.copy_password_to_clipboard(password)


  def copy_password_to_clipboard(self, password):
    syslog.syslog(syslog.LOG_INFO, 'copying password to clipboard')

    self.clipboard.set_text(password, -1)
    self.latest_chosen_password = password
    self.update_decrypt_codes(True)


# This is an alternative window for cases where all the exam decrypt
# codes do not fit into the panel.
class DecryptCodesWindow:
  def __init__(self, applet, labels_and_exams_list):
    self.applet = applet
    self.exams_by_widgets = {}
    self.labels_and_exams_list = labels_and_exams_list
    self.win = None


  def open(self, widget):
    if self.win:
      self.win.present()
      return

    self.win = Gtk.Window(title=_tr('Decrypt codes'))
    box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
    self.win.add(box)

    instructions = Gtk.Label(
                     _tr('Click passphrase below put it into clipboard'))
    box.pack_start(instructions, True, True, 0)

    for le in self.labels_and_exams_list:
      button = Gtk.Button.new_with_label(le['label'])
      self.exams_by_widgets[button] = le['exam']
      button.connect('clicked', self.password_triggered)
      button.show()
      box.pack_start(button, True, True, 0)

    self.win.connect('destroy', self.window_closed)
    self.win.show_all()


  def password_triggered(self, widget):
    password = self.exams_by_widgets[widget]['decrypt_code']
    self.applet.copy_password_to_clipboard(password)


  def window_closed(self, widget):
    self.win = None


class PuavoErsExamSync (threading.Thread):
  def __init__(self):
    threading.Thread.__init__(self)

    with open('/etc/puavo/domain') as f:
      self.domain = f.read().rstrip()
    with open('/etc/puavo/hostname') as f:
      self.hostname = f.read().rstrip()
    with open('/etc/puavo/id') as f:
      self.id = f.read().rstrip()
    with open('/etc/puavo/ldap/dn') as f:
      self.ldap_dn = f.read().rstrip()
    with open('/etc/puavo/ldap/password') as f:
      self.ldap_password = f.read().rstrip()


  def run(self):
     while True:
       try:
         self.sync_exams()
       except Exception as e:
         syslog.syslog(syslog.LOG_ERR, 'some error when syncing exams: %s' % e)

       time.sleep(60)


  def sync_exams(self):
    self.exam_server_address = puavoconf_get('puavo.abitti.exam_server')
    index_uri = 'https://%s/v1/schedules/query_exam_server_schedule' \
                   % self.exam_server_address

    syslog.syslog(syslog.LOG_INFO, 'checking for new exams from %s' % index_uri)

    response = requests.get(index_uri,
                            auth=HTTPBasicAuth(self.ldap_dn,
                                               self.ldap_password),
                            params={
                              'domain':   self.domain,
                              'hostname': self.hostname,
                              'id':       self.id,
                            })
    if not response:
      syslog.syslog(syslog.LOG_ERR,
        'error when getting exam index from %s: %s' \
          % (index_uri, response.status_code))
      return

    exams_json = response.content.decode('utf-8')
    self.update_exams_json_on_disk(exams_json)

    exam_name_list = []
    for exam in json.loads(exams_json):
      try:
        exam_file_name = exam['file_name']
        if not isinstance(exam_file_name, str):
          raise Exception('could not determine exam filename')
        if exam_file_name == '':
          raise Exception('could not determine exam filename')
        if not re.match('^exam_.*\.meb$', exam_file_name):
          raise Exception('not syncing exam with a filename %s' \
                            % exam_file_name)

        self.sync_one_exam(exam_file_name, exam)
        exam_name_list.append(exam_file_name)
      except Exception as e:
        syslog.syslog(syslog.LOG_ERR, 'error in syncing one exam: %s' % e)

    # clean up old exams that no longer belong to exams subdirectories
    for exam_path in glob.glob( os.path.join(EXAMS_DIR, 'exam_*.meb') ):
      if not os.path.basename(exam_path) in exam_name_list:
        # We check that file hard link count must be over 1, in which case
        # it has already been archived and we can delete it here.
        if os.stat(exam_path).st_nlink > 1:
          rm_f(exam_path)


  def update_exams_json_on_disk(self, exams_json):
    try:
      tmpfile = '%s.tmp' % EXAMS_JSON_FILE
      with open(tmpfile, 'w') as f:
        f.write(exams_json)
      os.rename(tmpfile, EXAMS_JSON_FILE)
    except Exception as e:
      # XXX should user be notified?
      syslog.syslog(syslog.LOG_CRIT,
        'error in writing exams (json) to %s: %s' % (EXAMS_JSON_FILE, e))


  def sync_one_exam(self, exam_file_name, exam):
    exam_file_path = os.path.join(EXAMS_DIR, exam_file_name)
    if os.path.isfile(exam_file_path):
      return

    syslog.syslog(syslog.LOG_NOTICE, 'syncing exam %s' % exam_file_name)

    exam_hash = exam['file_sha256']
    if not isinstance(exam_hash, str):
      raise Exception('could not determine exam hash for %s' % exam_file_name)

    exam_uri = 'https://%s/v1/exams/raw_file' % self.exam_server_address

    response = requests.get(exam_uri,
                            auth=HTTPBasicAuth(self.ldap_dn,
                                               self.ldap_password),
                            params={
                              'domain':   self.domain,
                              'hash':     exam_hash,
                              'hostname': self.hostname,
                              'id':       self.id,
                            })
    if not response:
      raise Exception('error when getting an exam from %s: %s' \
              % (exam_uri, response.status_code))

    tmpfile = '%s.tmp' % exam_file_path
    with open(tmpfile, 'wb') as f:
      f.write(response.content)
    os.rename(tmpfile, exam_file_path)

    syslog.syslog(syslog.LOG_INFO, 'exam %s synced okay' % exam_file_name)


class PuavoErsExamSorter (threading.Thread):
  def __init__(self):
    threading.Thread.__init__(self)

    self.previous_current_exams = []
    self.previous_todays_exams  = []


  def run(self):
    while True:
      try:
        with exam_scheduler_lock:
          self.sort_exams_to_dirs()
      except Exception as e:
        syslog.syslog(syslog.LOG_ERR, 'some error when sorting exams: %s' % e)

      time.sleep(10)


  def sort_exams_to_dirs(self):
    global current_exams

    self.current_day  = datetime.date.today()
    self.current_time = datetime.datetime.now()

    try:
      with open(EXAMS_JSON_FILE) as file:
        all_exams = json.load(file)
    except OSError as e:
      if e.errno != errno.ENOENT:
        raise e
      return

    archived_exams = []
    current_exams  = []
    todays_exams   = []
    upcoming_exams = []

    decrypt_codes_list = []

    for exam in all_exams:
      try:
        if not re.match('^exam_.*\.meb$', exam['file_name']):
          raise Exception('ignoring exam with a file name %s' \
                            % exam['file_name'])

        exam_start_day  = datetime.date.fromtimestamp(exam['start_time'])
        exam_start_time = datetime.datetime.fromtimestamp(exam['start_time'])

        exam_end_day    = datetime.date.fromtimestamp(exam['end_time'])
        exam_end_time   = datetime.datetime.fromtimestamp(exam['end_time'])

        if exam_end_time < self.current_time:
          # add to archive, but only if exam has been active in the last
          # two weeks
          end_time = exam_end_time.timestamp()
          cur_time = self.current_time.timestamp()
          if cur_time < (end_time + 60 * 60 * 24 * 14):
            archived_exams.append(exam['file_name'])
        elif self.current_day < exam_start_day:
          upcoming_exams.append(exam['file_name'])
        else:
          todays_exams.append(exam['file_name'])

        if exam_start_time <= self.current_time \
          and self.current_time < exam_end_time:
            current_exams.append(exam['file_name'])
            decrypt_codes_list.append(exam['decrypt_code'])

      except Exception as e:
        syslog.syslog(syslog.LOG_ERR, 'could not handle an exam: %s' % e)

    self.handle_archive(archived_exams)

    self.cleanup_exams(KTP_JAKO_DIR, todays_exams)
    self.link_exams_to_dir(KTP_JAKO_DIR, todays_exams)

    self.cleanup_exams(EXAMS_UPCOMING_DIR, upcoming_exams)
    self.link_exams_to_dir(EXAMS_UPCOMING_DIR, upcoming_exams)

    self.zip_exams(current_exams, todays_exams, decrypt_codes_list)


  def cleanup_exams(self, linkdir, exam_filenames):
    for path in glob.glob( os.path.join(linkdir, 'exam_*.meb') ):
      if not os.path.basename(path) in exam_filenames:
        rm_f(path)


  def handle_archive(self, exam_filenames):
    self.link_exams_to_dir(EXAMS_ARCHIVE_DIR, exam_filenames)

    for path in glob.glob( os.path.join(EXAMS_ARCHIVE_DIR, 'exam_*.meb') ):
      try:
        file_atime = os.stat(path).st_atime
        # keep archived files for two weeks
        if (file_atime + 60 * 60 * 24 * 14) < self.current_time.timestamp():
          syslog.syslog(syslog.LOG_NOTICE,
                        'removing from archive: %s' % path)
          rm_f(path)
      except Exception as e:
        syslog.syslog(syslog.LOG_ERR,
                      'error in checking old archive file %s: %s' \
                        % (path, e))


  def link_exams_to_dir(self, linkdir, exam_filenames):
    for exam_name in exam_filenames:
      try:
        target_path = os.path.join(linkdir, exam_name)
        os.link(os.path.join(EXAMS_DIR, exam_name), target_path)
        syslog.syslog(syslog.LOG_INFO,
                      'exam %s linked to %s' % (exam_name, linkdir))

        # updates access time only when link has been made
        st = os.stat(target_path)
        os.utime(target_path,
                 (datetime.datetime.now().timestamp(), st.st_mtime))
      except OSError as e:
        if e.errno != errno.EEXIST:
          raise e


  def zip_exams(self, current_exams, todays_exams, decrypt_codes_list):
    global current_zip_name

    current_zip_name = 'Menossa-%s.zip' % self.current_day
    todays_zip_name  = 'Kaikki-%s.zip'  % self.current_day

    current_exams.sort()
    todays_exams.sort()

    current_zip_path = os.path.join(KTP_JAKO_DIR, current_zip_name)
    todays_zip_path  = os.path.join(KTP_JAKO_DIR, todays_zip_name)

    try:
      if current_exams != self.previous_current_exams:
        self.zip_an_exam_set(current_exams, current_zip_path)
        self.update_decrypt_codes_in_file(decrypt_codes_list)
        self.previous_current_exams = current_exams
    except Exception as e:
      syslog.syslog(syslog.LOG_ERR,
        'error when zipping current exams (or updating decrypt codes): %s' % e)

    try:
      if todays_exams != self.previous_todays_exams:
        self.zip_an_exam_set(todays_exams, todays_zip_path)
        self.previous_todays_exams = todays_exams
    except Exception as e:
      syslog.syslog(syslog.LOG_ERR, 'error when zipping todays exams: %s' % e)

    current_zip_files = glob.glob( os.path.join(KTP_JAKO_DIR, 'Menossa-*.zip') )
    todays_zip_files  = glob.glob( os.path.join(KTP_JAKO_DIR, 'Kaikki-*.zip') )
    for zipfile in (current_zip_files + todays_zip_files):
      if not zipfile in [ current_zip_path, todays_zip_path ]:
        rm_f(zipfile)


  def zip_an_exam_set(self, exams, zip_path):
    rm_f(zip_path)
    if len(exams) > 0:
      exam_paths = [ os.path.join(KTP_JAKO_DIR, p) for p in exams ]
      syslog.syslog(syslog.LOG_INFO,
                    'zipping exams %s into %s' % (exams, zip_path))
      subprocess.check_output([ 'zip', '-j', zip_path ] + exam_paths)


  def update_decrypt_codes_in_file(self, decrypt_codes_list):
    DECRYPT_CODES_PATH = os.path.join(KTP_JAKO_DIR, 'PURKUKOODIT.TXT')

    syslog.syslog(syslog.LOG_INFO,
                  'updating decrypt codes in %s' % DECRYPT_CODES_PATH)

    tmpfile = '%s.tmp' % DECRYPT_CODES_PATH
    with open(tmpfile, 'w') as f:
      decrypt_codes_list.sort()
      for decrypt_code in decrypt_codes_list:
        f.write("%s\n" % decrypt_code)
    os.rename(tmpfile, DECRYPT_CODES_PATH)


class PuavoErsServerHelper (threading.Thread):
  MGMT_INSTALL_SOURCE_PATH = '/opt/abitti-ktpapi/install'
  MGMT_INSTALL_TARGET_PATH = os.path.join(KTP_JAKO_DIR, 'ktpapi-install')

  def run(self):
    while True:
      try:
        update = False
        try:
          if os.path.exists(self.MGMT_INSTALL_SOURCE_PATH):
            if not filecmp.cmp(self.MGMT_INSTALL_SOURCE_PATH,
                               self.MGMT_INSTALL_TARGET_PATH):
              update = True
        except OSError as e:
          if e.errno != errno.ENOENT:
            raise e
          update = True

        if update:
          syslog.syslog(syslog.LOG_NOTICE,
                        'copying/updating %s to %s' \
                          % (self.MGMT_INSTALL_SOURCE_PATH,
                             self.MGMT_INSTALL_TARGET_PATH))
          shutil.copy2(self.MGMT_INSTALL_SOURCE_PATH,
                       self.MGMT_INSTALL_TARGET_PATH)

      except Exception as e:
        syslog.syslog(syslog.LOG_ERR,
                      'some error when managing exams dir: %s' % e)

      time.sleep(60)


class PuavoErsExamScheduler (threading.Thread):
  COMM_DIR = os.path.join(KTP_JAKO_DIR, '.opinsys')

  CMD_PATH          = os.path.join(COMM_DIR, 'cmd')
  CMD_RESULT_PATH   = os.path.join(COMM_DIR, 'cmd-result')
  CMD_STAMP_PATH    = os.path.join(COMM_DIR, 'cmd-stamp')
  DEBUG_OUTPUT_PATH = os.path.join(COMM_DIR, 'debug-output')
  EXAMS_PATH        = os.path.join(COMM_DIR, 'exams')
  OUTPUT_PATH       = os.path.join(COMM_DIR, 'output')
  STATS_PATH        = os.path.join(COMM_DIR, 'stats')

  def __init__(self):
    threading.Thread.__init__(self)


  def get_exams(self):
    return self.server_cmd('get-exam')


  def load_exams(self):
    global current_zip_name

    if current_zip_name == None:
      raise CurrentZipNotReady

    cmd = 'load-exam %s %s' % (current_zip_name, 'PURKUKOODIT.TXT')
    return self.server_cmd(cmd)


  def ping(self):
    return self.server_cmd('ping')


  def run(self):
    comm_ok = False
    old_comm_state = None

    while True:
      try:
        if not comm_ok:
          output = self.ping()
          if output:
            comm_ok = True
            if old_comm_state != comm_ok:
              syslog.syslog(syslog.LOG_NOTICE,
                            'communication link to exam server is ok')
          else:
            comm_ok = False
            if old_comm_state != comm_ok:
              syslog.syslog(syslog.LOG_INFO,
                            'no communication link to exam server')

        old_comm_state = comm_ok

        if comm_ok:
          with exam_scheduler_lock:
            self.schedule_exams()

      except Exception as e:
        comm_ok = False
        syslog.syslog(syslog.LOG_ERR,
                      'some error when scheduling exams: %s' % e)

      time.sleep(20)


  def schedule_exams(self):
    global current_exams

    get_exams_output = self.get_exams()
    syslog.syslog(syslog.LOG_INFO, 'get-exam returned %s' % get_exams_output)

    # XXX This is currently broken, output is not valid json so can not check
    # XXX the current exams.
    parsed_response = json.loads(get_exams_output)
    syslog.syslog(syslog.LOG_INFO, 'got response: %s' % parsed_response)

    # XXX get currently loaded exams from parsed_response,
    # XXX if some exam is missing, then load new exams

    # XXX what if someone does something in the server?
    # XXX what about manual control?  this should first actually check out
    # XXX what is running, and add what is missing (not remove others)

    syslog.syslog(syslog.LOG_INFO,
                  'must ensure that exams %s are running' % current_exams)

    # XXX how to know if this is successful?  an exception should be raised
    # XXX in case of failure?
    try:
      load_exams_output = self.load_exams()
      syslog.syslog(syslog.LOG_INFO, 'load exams returned %s' % output)
    except CurrentZipNotReady as e:
      syslog.syslog(syslog.LOG_INFO,
                    'exam scheduler is waiting for zip file to be ready')


  def server_cmd(self, cmd):
    syslog.syslog(syslog.LOG_INFO, 'sending command to exam server: %s' % cmd)
    output_paths = [ self.CMD_RESULT_PATH, self.DEBUG_OUTPUT_PATH,
                     self.EXAMS_PATH, self.OUTPUT_PATH, self.STATS_PATH ]
    for path in output_paths:
      rm_f(path, False)

    with open(self.CMD_PATH, 'w') as f:
      f.write("%s\n" % cmd)

    output = None
    for i in range(20):
      try:
        with open(self.OUTPUT_PATH) as f:
          output = f.read()
          break
      except OSError as e:
        if e.errno != errno.ENOENT:
          raise e

      time.sleep(1)

    return output


syslog.openlog('puavo-ers-applet')

syslog.syslog(syslog.LOG_NOTICE, 'puavo-ers-applet starting up')

applet = PuavoErsApplet()

for dir in [ KTP_JAKO_DIR, EXAMS_DIR, EXAMS_ARCHIVE_DIR, EXAMS_UPCOMING_DIR ]:
  try:
    os.mkdir(dir)
  except OSError as e:
    if e.errno != errno.EEXIST:
      raise e

if __name__ == '__main__':
  signal.signal(signal.SIGINT, signal.SIG_DFL)
  applet.main()

syslog.closelog()
