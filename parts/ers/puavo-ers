#!/usr/bin/wish

wm attributes . -type splash
wm maxsize    . 700 36
wm minsize    . 700 36

# XXX network_adapter setting could come from puavo-conf?
# XXX where to get box number and server version?  should these be
# XXX on some abitti-ktp.json, downloaded from somewhere, or such?
# XXX maybe we could map Abitti-versions to box number and server version?
set box_number      138
set network_adapter "eth0"
set server_version  "SERVER1937W v138"

set ers_dir       "$env(HOME)/.puavo/puavo-ers/${box_number}"
set exam_sharedir "$env(HOME)/ktp-jako"

set vagrantfile {
  # -*- mode: ruby -*-
  # vi: set ft=ruby :

  require 'facter'
  require 'getoptlong'

  opts = GetoptLong.new(
    [ '--box-number',      GetoptLong::REQUIRED_ARGUMENT ],
    [ '--network-adapter', GetoptLong::OPTIONAL_ARGUMENT ],
    [ '--server-version',  GetoptLong::REQUIRED_ARGUMENT ],
  )

  box_number      = nil
  network_adapter = 'eth0'
  server_version  = nil

  opts.each do |opt, arg|
    case opt
      when '--box-number'
        box_number = arg
      when '--network-adapter'
        network_adapter = arg
      when '--server-version'
        server_version = arg
    end
  end

  cpus = [ 1, Facter['processorcount'].value.to_i - 1 ].max
  mem  = (0.75 * Facter['memorysize_mb'].value.to_i).to_i

  # All Vagrant configuration is done below. The "2" in Vagrant.configure
  # configures the configuration version (we support older styles for
  # backwards compatibility). Please don't change it unless you know what
  # you're doing.
  Vagrant.configure('2') do |config|
    config.vm.boot_timeout = 300
    config.vm.box = 'digabi/ktp-qa'
    config.vm.box_url = "https://s3-eu-west-1.amazonaws.com/static.abitti.fi/usbimg/qa/vagrant/package-#{ box_number }.box"
    config.vm.provider :virtualbox do |vb|
      vb.name = server_version
      vb.gui = true
      vb.customize [ 'modifyvm',     :id, '--ioapic',       'on'            ]
      vb.customize [ 'modifyvm',     :id, '--cpus',         cpus            ]
      vb.customize [ 'modifyvm',     :id, '--memory',       mem             ]
      vb.customize [ 'modifyvm',     :id, '--nictype1',     'virtio'        ]
      vb.customize [ 'modifyvm',     :id, '--clipboard',    'bidirectional' ]
      vb.customize [ 'modifyvm',     :id, '--vram',          24             ]
      vb.customize [ 'modifyvm',     :id, '--description',  'digabi/ktp-qa' ]
      vb.customize [ 'setextradata', :id, 'GUI/Fullscreen', 'true'          ]

      vb.customize [ 'setextradata',
                     'global',
                     'GUI/SuppressMessages',
                     %w(confirmGoingFullscreen
                        remindAboutAutoCapture
                        remindAboutMouseIntegration).join(',') ]
    end

    config.vm.synced_folder '~/ktp-jako', '/media/usb1', id: 'media_usb1'
    config.vm.network 'public_network',
                      :adapter => 1,
                      bridge: network_adapter,
                      auto_config: false
  end
}

proc update_all_exams_pack {} {
  global env exam_sharedir old_exam_share_meb_paths

  catch {
    set exam_share_meb_paths [exec find $exam_sharedir -maxdepth 1 -name *.meb]
    if {$old_exam_share_meb_paths ne $exam_share_meb_paths} {
      set all_zip_path  "${exam_sharedir}/Kaikki.zip"
      file delete $all_zip_path
      if {[llength $exam_share_meb_paths] > 0} {
        exec zip $all_zip_path {*}$exam_share_meb_paths
      }
      set old_exam_share_meb_paths $exam_share_meb_paths
    }
  }

  after 3000 update_all_exams_pack
}

proc handle_vagrant_output {} {
  global vagrant

  set count [gets $vagrant line]
  if {$count > 0 } {
    puts $line
    .activity configure -text $line
    if {[regexp {Progress: (\d+)%} $line _ progress]} {
      # puts "GOT PROGRESS $progress"
    }
  }

  if {[eof $vagrant]} {
    close $vagrant
    # XXX vagrant has shut down, what should we do?
  }
}

proc update_exams_from_media {} {
  global env exam_sharedir old_media_meb_paths

  catch {
    set media_meb_paths [exec find "/media/$env(USER)" -name *.meb]
    if {$old_media_meb_paths ne $media_meb_paths} {
      foreach meb_path $media_meb_paths {
        file copy -force $meb_path $exam_sharedir
      }
      set old_media_meb_paths $media_meb_paths
    }
  }

  after 3000 update_exams_from_media
}

proc maybe_close_window {} {
  if {![catch { exec vagrant status | grep -q {default.*running} }]} {
    wm withdraw .
    return
  }

  after 1000 [list maybe_close_window]
}

proc update_vagrantfile {} {
  global vagrantfile

  set vagrant_fh [open Vagrantfile w]

  puts $vagrant_fh $vagrantfile
  close $vagrant_fh
}

exec mkdir -p $ers_dir $exam_sharedir
cd $ers_dir

update_vagrantfile

set old_exam_share_meb_paths [list]
set old_media_meb_paths      [list]

update_all_exams_pack
update_exams_from_media

# XXX should we restart vagrant if it shuts down?
# XXX we need progress bar for the first time (and when updating later)
# XXX how do we recognize download is over and virtual machine is running?
set vagrant [open "|[list vagrant --box-number=${box_number}           \
                                  --network-adapter=${network_adapter} \
                                  --server-version=${server_version} up]"]
fconfigure $vagrant -blocking 0
fileevent $vagrant readable [list handle_vagrant_output]

label .activity -text "Waiting vagrant..."
ttk::progressbar .progressbar -length 700           \
                              -mode   indeterminate \
                              -orient horizontal

pack .activity    -fill both -expand 1
pack .progressbar -fill both -expand 1

.progressbar start

maybe_close_window
