#!/usr/bin/wish

set ers_dir       "$env(HOME)/.puavo/puavo-ers"
set exam_sharedir "$env(HOME)/ktp-jako"

set vagrantfile {
  # -*- mode: ruby -*-
  # vi: set ft=ruby :

  require 'facter'
  require 'getoptlong'

  opts = GetoptLong.new(
    [ '--public-network-adapter', GetoptLong::OPTIONAL_ARGUMENT ]
  )

  public_network_adapter = 'eth0'

  opts.each do |opt, arg|
    case opt
      when '--public-network-adapter'
        public_network_adapter = arg
    end
  end

  cpus = [ 1, Facter['processorcount'].value.to_i - 1 ].max
  mem  = (0.75 * Facter['memorysize_mb'].value.to_i).to_i

  # All Vagrant configuration is done below. The "2" in Vagrant.configure
  # configures the configuration version (we support older styles for
  # backwards compatibility). Please don't change it unless you know what
  # you're doing.
  Vagrant.configure('2') do |config|
    config.vm.boot_timeout = 300
    config.vm.box = 'digabi/ktp-qa'
    config.vm.box_url = 'https://s3-eu-west-1.amazonaws.com/static.abitti.fi/usbimg/qa/vagrant/metadata.json'
    config.vm.provider :virtualbox do |vb|
      vb.name = 'Puavo ERS'
      vb.gui = true
      vb.customize [ 'modifyvm',     :id, '--ioapic',       'on'            ]
      vb.customize [ 'modifyvm',     :id, '--cpus',         cpus            ]
      vb.customize [ 'modifyvm',     :id, '--memory',       mem             ]
      vb.customize [ 'modifyvm',     :id, '--nictype1',     'virtio'        ]
      vb.customize [ 'modifyvm',     :id, '--clipboard',    'bidirectional' ]
      vb.customize [ 'modifyvm',     :id, '--vram',          24             ]
      vb.customize [ 'modifyvm',     :id, '--description',  'digabi/ktp-qa' ]
      vb.customize [ 'setextradata', :id, 'GUI/Fullscreen', 'true'          ]

      vb.customize [ 'setextradata',
                     'global',
                     'GUI/SuppressMessages',
                     %w(confirmGoingFullscreen
                        remindAboutAutoCapture
                        remindAboutMouseIntegration).join(',') ]
    end

    config.vm.synced_folder '~/ktp-jako', '/media/usb1', id: 'media_usb1'
    config.vm.network 'public_network',
                      :adapter => 1,
                      bridge: public_network_adapter,
                      auto_config: false
  end
}

proc update_all_exams_pack {} {

}

proc update_exams_from_media {} {
  global env exam_sharedir old_media_meb_paths

  catch {
    set media_meb_paths [exec find "/media/$env(USER)" -name *.meb]
    if {$old_media_meb_paths ne $media_meb_paths} {
      foreach meb_path $media_meb_paths {
        puts "copying $meb_path to $exam_sharedir"
        file copy -force $meb_path $exam_sharedir
      }
      set old_media_meb_paths $media_meb_paths
    }
  } foo

  after 3000 update_exams_from_media
}

proc update_vagrantfile {} {
  global vagrantfile

  set vagrant_fh [open Vagrantfile w]
  puts $vagrant_fh $vagrantfile
  close $vagrant_fh
}

exec mkdir -p $ers_dir $exam_sharedir
cd $ers_dir

update_vagrantfile

set public_network_adapter "eth0"

frame .network_chooser

foreach network [split [exec facter interfaces] ,] {
  if {$network eq "lo"} { continue }
  # XXX what if $network is not a valid gui path component?
  radiobutton .network_chooser.$network -text $network \
                                        -value $network \
                                        -variable public_network_adapter
  pack .network_chooser.$network -anchor w
}

button .start_button -text "Start!" -command {
  catch {
    puts [exec -ignorestderr \
               vagrant "--public-network-adapter=${public_network_adapter}" up]
  }
}

pack .network_chooser
pack .start_button -fill both -expand 1

set old_media_meb_paths [list]

update_exams_from_media
