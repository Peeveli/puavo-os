#!/usr/bin/wish

package require json

wm attributes . -type splash
wm maxsize    . 700 36
wm minsize    . 700 36

set exam_sharedir "$env(HOME)/ktp-jako"

set vagrantfile {
  # -*- mode: ruby -*-
  # vi: set ft=ruby :

  require 'facter'
  require 'getoptlong'

  opts = GetoptLong.new(
    [ '--abitti-version',  GetoptLong::REQUIRED_ARGUMENT ],
    [ '--network-adapter', GetoptLong::OPTIONAL_ARGUMENT ],
    [ '--prepare',         GetoptLong::NO_ARGUMENT       ],
    [ '--server-version',  GetoptLong::REQUIRED_ARGUMENT ],
    [ '--virtual-box-url', GetoptLong::REQUIRED_ARGUMENT ],
  )

  abitti_version  = nil
  network_adapter = 'eth0'
  prepare         = false
  server_version  = nil
  virtual_box_url = nil

  opts.each do |opt, arg|
    case opt
      when '--abitti-version'
        abitti_version = arg.sub(/^abitti-v/, '')
      when '--network-adapter'
        network_adapter = arg
      when '--prepare'
        prepare = true
      when '--server-version'
        server_version = arg
      when '--virtual-box-url'
        virtual_box_url = arg
    end
  end

  cpus = [ 1, Facter['processorcount'].value.to_i - 1 ].max
  mem  = (0.75 * Facter['memorysize_mb'].value.to_i).to_i

  # All Vagrant configuration is done below. The "2" in Vagrant.configure
  # configures the configuration version (we support older styles for
  # backwards compatibility). Please don't change it unless you know what
  # you're doing.
  Vagrant.configure('2') do |config|
    config.vm.boot_timeout = 1
    config.vm.box = "digabi/ktp-qa-abitti-v#{ abitti_version }"
    config.vm.box_url = virtual_box_url
    config.vm.provider :virtualbox do |vb|
      vb.name = "#{ server_version } (#{ abitti_version })"
      vb.gui = (prepare ? false : true)
      vb.customize [ 'modifyvm',     :id, '--ioapic',       'on'            ]
      vb.customize [ 'modifyvm',     :id, '--cpus',         cpus            ]
      vb.customize [ 'modifyvm',     :id, '--memory',       mem             ]
      vb.customize [ 'modifyvm',     :id, '--nictype1',     'virtio'        ]
      vb.customize [ 'modifyvm',     :id, '--clipboard',    'bidirectional' ]
      vb.customize [ 'modifyvm',     :id, '--vram',          24             ]
      vb.customize [ 'modifyvm',     :id, '--description',  'digabi/ktp-qa' ]
      vb.customize [ 'setextradata', :id, 'GUI/Fullscreen', 'true'          ]

      vb.customize [ 'setextradata',
                     'global',
                     'GUI/SuppressMessages',
                     %w(confirmGoingFullscreen
                        remindAboutAutoCapture
                        remindAboutMouseIntegration).join(',') ]
    end

    config.vm.synced_folder '~/ktp-jako', '/media/usb1', id: 'media_usb1'
    config.vm.network 'public_network',
                      :adapter => 1,
                      bridge: network_adapter,
                      auto_config: false
  end
}

proc download_abitti_json {abitti_json_path} {
  exec wget -q --ca-certificate=/etc/puavo/certs/rootca.pem \
            -O "${abitti_json_path}.tmp" \
            https://images.opinsys.fi/abitti-images/abitti.json
  file rename -force "${abitti_json_path}.tmp" $abitti_json_path
}

proc handle_vagrant_output {vagrant_fh ers_dir prepare} {
  global vagrant

  set count [gets $vagrant_fh line]
  if {$count > 0} {
    puts $line
    .activity configure -text $line
  }

  if {[eof $vagrant_fh]} {
    fconfigure $vagrant_fh -blocking 1
    if {[catch { close $vagrant_fh } errormsg]} {
      puts stderr "vagrant returned error:\n$errormsg"
    }
    puts "vagrant returned successfully"
    if {$prepare} {
      puts "virtual machine startup was only for preparing, halting"
      cd $ers_dir
      exec vagrant halt
    } else {
      # XXX should we ever show the window again?
      # XXX or show we just destroy it?
      # XXX and put it back when we are starting up a virtual machine
      # XXX that we need to download right now?
      # XXX perhaps all virtual machines should go through the preparation
      # XXX stage, even the first one?
      wm withdraw .
    }
  }
}

proc read_file {path} {
  set f [open $path]
  try {
    set data [read $f]
  } finally {
    close $f
  }
  return [string trimright $data "\n"]
}

proc start_virtual_machine {abitti_version {prepare false}} {
  global abitti_config ers_basedir

  set network_adapter "eth0"
  set server_version  [dict get $abitti_config server $abitti_version \
                                                      server_version]
  set virtual_box_url [dict get $abitti_config server $abitti_version \
                                                      virtual_box_url]

  set vagrant_args [list --abitti-version=${abitti_version}   \
                         --network-adapter=${network_adapter} \
                         --server-version=${server_version}   \
                         --virtual-box-url=${virtual_box_url}]
  if {$prepare} {
    lappend vagrant_args --prepare
  }

  set ers_dir "${ers_basedir}/${abitti_version}"
  update_vagrantfile $ers_dir
  cd $ers_dir
  set vagrant_fh [open "|[list vagrant {*}$vagrant_args up]"]

  fconfigure $vagrant_fh -blocking 0
  fileevent $vagrant_fh readable [
    list handle_vagrant_output $vagrant_fh $ers_dir $prepare
  ]
}

proc update_all_exams_pack {} {
  global env exam_sharedir old_exam_share_meb_paths

  catch {
    set exam_share_meb_paths [exec find $exam_sharedir -maxdepth 1 -name *.meb]
    if {$old_exam_share_meb_paths ne $exam_share_meb_paths} {
      set all_zip_path  "${exam_sharedir}/Kaikki.zip"
      file delete $all_zip_path
      if {[llength $exam_share_meb_paths] > 0} {
        exec zip $all_zip_path {*}$exam_share_meb_paths
      }
      set old_exam_share_meb_paths $exam_share_meb_paths
    }
  }

  after 3000 update_all_exams_pack
}

proc update_exams_from_media {} {
  global env exam_sharedir old_media_meb_paths

  catch {
    set media_meb_paths [exec find "/media/$env(USER)" -name *.meb]
    if {$old_media_meb_paths ne $media_meb_paths} {
      foreach meb_path $media_meb_paths {
        file copy -force $meb_path $exam_sharedir
      }
      set old_media_meb_paths $media_meb_paths
    }
  }

  after 3000 update_exams_from_media
}

proc update_vagrantfile {ers_dir} {
  global vagrantfile

  exec mkdir -p $ers_dir

  set vagrant_fh [open "${ers_dir}/Vagrantfile" w]

  puts $vagrant_fh $vagrantfile
  close $vagrant_fh
}

set ers_basedir      "$env(HOME)/.puavo/puavo-ers"
set abitti_json_path "${ers_basedir}/abitti.json"

exec mkdir -p $ers_basedir
catch { download_abitti_json $abitti_json_path }
if {![file exists $abitti_json_path]} {
  tk_messageBox -icon error \
                -message "could not retrieve abitti version information"
  exit 1
}

set abitti_config [json::json2dict [read_file $abitti_json_path]]

set abitti_version [exec puavo-conf puavo.abitti.version]
if {$abitti_version eq "latest"} {
  set abitti_version [dict get $abitti_config latest]
}
if {![dict exists $abitti_config server $abitti_version]} {
  tk_messageBox -icon error \
                -message "requested an unknown abitti version: $abitti_version"
  # XXX should we try to use some other abitti version?
  exit 1
}

exec mkdir -p $exam_sharedir

start_virtual_machine $abitti_version

set old_exam_share_meb_paths [list]
set old_media_meb_paths      [list]

update_all_exams_pack
update_exams_from_media

label .activity -text "Waiting vagrant..."
ttk::progressbar .progressbar -length 700           \
                              -mode   indeterminate \
                              -orient horizontal

pack .activity    -fill both -expand 1
pack .progressbar -fill both -expand 1

.progressbar start
