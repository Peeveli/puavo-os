#!/bin/sh

set -eu

if [ "$(puavo-conf puavo.puavomenu.enabled)" = "true" ]; then
    HOSTNAME=$(hostname)
    /opt/puavomenu/send_command "${HOME}/.config/puavomenu_${HOSTNAME}_socket" $@
    exit 0
fi

setup_webmenu_window_mode() {
  setup_mode_status=0
  # set webmenu window type to be menu
  # (actually running this once for each webmenu startup should be enough)
  webmenu_xwin_id=$(xdotool search --name Webmenu) || return 1
  if [ -n "$webmenu_xwin_id" ]; then
    xprop -id "$webmenu_xwin_id" -f _NET_WM_WINDOW_TYPE 32a \
      -set _NET_WM_WINDOW_TYPE _NET_WM_WINDOW_TYPE_MENU || setup_mode_status=1
    # activate webmenu window (switch desktop, raise, give focus)
    xdotool windowactivate "$webmenu_xwin_id"           || setup_mode_status=1
  fi

  return $setup_mode_status
}

spawn() {
  socketfile=$1; shift
  echo "$@" | nc -U "$socketfile"
}

# detect development mode
if [ -f package.json ]; then
  export PATH="$(pwd)/bin:$PATH"
fi

. webmenu-env

webmenu_dir=~/.config/webmenu
default_spawn_sock="${webmenu_dir}/spawn.sock"

mkdir -p "$webmenu_dir"

(
  if ! flock -n 9; then
    echo "$(basename $0) is already running" >&2
    exit 1
  fi

  args="$@"

  # Check if the --pos=X,Y argument was specified on the command line.
  # If this script was called from the Webmenu shell extension, then
  # it will be there. Otherwise we'll have extra work to do.
  pos_specified=0

  for arg in $args; do
    case "$arg" in
      --pos=*)
        pos_specified=1
        ;;
    esac
  done

  if [ "$pos_specified" -eq 0 ]; then
    # No position specified. Assume the script was called from the command
    # line, or by pressing Alt+F1. Determine the mouse position and add it
    # to the arguments, so the menu is centered around the mouse cursor.
    {
      eval $(xdotool getmouselocation --shell) \
        && args="--pos=$X,$Y --center $args"
    } || true
  fi

  # try spawn in a loop, because webmenu might not have started up yet
  i=0
  while [ "$i" -le 30 ]; do
    # If first spawn fails, retry with default pipe path.
    # Used when starting webmenu with "nw ."
    if spawn "$WM_SOCK" "$args" || spawn "$default_spawn_sock" "$args"; then
      setup_webmenu_window_mode || true
      exit 0
    fi

    sleep 0.5
    i=$(($i + 1))
  done

  echo 'failed to spawn webmenu' >&2
  notify-send --urgency=critical "Failed to spawn Webmenu" "Not running?"
  exit 1
) 9< "$webmenu_dir"
