#!/bin/bash
#
# ##############################################################################
#
# Copyright (C) 2016 Opinsys Oy
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# ##############################################################################
#
# Author: Tuomas Räsänen <tuomasjjrasanen@tjjr.fi>
#

set -eu

on_exit()
{
    if [ ${exitval} -ne 0 ]; then
	rm -rf "${repopath}"
    fi

    exit ${exitval}
}

usage_error()
{
    echo "ERROR: $1" >&2
    echo "Try --help for help". >&2
    return 1
}

copy_src_dirs=()
include_from=
do_link=false
do_recursive=false
cp_flags='-n'
find_depth_flags='-mindepth 1 -maxdepth 1'

while [ $# -gt 0 ]; do
    case $1 in
        -c|--copy-from)
            shift
            if [ ! -d "$1" ]; then
                usage_error "copy source directory '$1' does not exist"
            fi
            copy_src_dirs+=($1)
            shift
            ;;
        -h|--help)
            shift
            echo "Usage: $0 DIR"
            echo
            echo "Create a very simple APT repository."
            echo
            echo "Options:"
            echo "    -c, --copy-from DIR          copy package files from DIR"
            echo "    -h, --help                   print help and exit"
            echo "    -l, --link                   hard link files instead of copying"
            echo "    -r, --recursive              copy files recursively"
            echo "    -I, --include-from FILE      include only files listed in FILE"
            echo
            exit 0
            ;;
        -I|--include-from)
            if [ -n "${include_from}" ]; then
                usage_error "--include-from can be given only once"
            fi
            shift
            include_from=$1
            shift
            if [ ! -f "${include_from}" ]; then
                usage_error "include file '${include_from}' does not exist"
            fi
            ;;
        -l|--link)
            shift
            do_link=true
            cp_flags="${cp_flags} -l"
            ;;
        -r|--recursive)
            shift
            do_recursive=true
            find_depth_flags=''
            ;;
        --)
            shift
            break
            ;;
        -*)
            usage_error "invalid argument '$1'"
            ;;
        *)
            break
            ;;
    esac
done

if [ $# -ne 1 ]; then
    usage_error "invalid number of arguments: got $#, expected 1"
fi

if [ -n "${include_from}" -a ${#copy_src_dirs[@]} -eq 0 ]; then
    usage_error "--include-file cannot be used without --copy-from"
fi

if ${do_link} && [ ${#copy_src_dirs[@]} -eq 0 ]; then
    usage_error "--link cannot be used without --copy-from"
fi

if ${do_recursive} && [ ${#copy_src_dirs[@]} -eq 0 ]; then
    usage_error "--recursive cannot be used without --copy-from"
fi

repopath=$1
shift

mkdir "${repopath}"

exitval=1
trap on_exit EXIT

mkdir "${repopath}/pool"

cat >"${repopath}/Makefile" <<'EOF'
Release.gpg: Release
	gpg --output - -a -b $< >$@

Release: Packages.gz Sources.gz
	apt-ftparchive release . >$@

%.gz: %
	gzip -c $< >$@

Packages: pool $(wildcard pool/*.deb)
	apt-ftparchive packages pool >$@

Sources: pool $(wildcard pool/*.deb)
	apt-ftparchive sources pool >$@

pool:
	mkdir $@

.PHONY: clean
clean:
	rm -rf Packages Packages.gz Release Release.gpg Sources Sources.gz
EOF

if [ ${#copy_src_dirs[@]} -gt 0 ]; then
    find ${copy_src_dirs[@]} ${find_depth_flags} -type f -name '*.deb' -print0 | \
        while read -d '' filepath; do
            name=$(dpkg -f "${filepath}" Package)
            vers=$(dpkg -f "${filepath}" Version)
            arch=$(dpkg -f "${filepath}" Architecture)
            vers=$(echo "${vers}" | sed -r -n 's/^([0-9]+:)?(.+)$/\2/p') # strip colons
            src_filename=$(basename "${filepath}")
            dst_filename="${name}_${vers}_${arch}.deb"
            if [ -z "${include_from}" ] || grep -q -x "${dst_filename}" "${include_from}"; then
                dst_filepath="${repopath}/pool/${dst_filename}"
                if [ -e "${dst_filepath}" ]; then
                    echo "WARNING: destination file '${dst_filepath}' already exists, skipping" >&2
                else
                    cp ${cp_flags} "${filepath}" "${dst_filepath}"
                fi
            fi
    done
fi

make -s -C "${repopath}"

exitval=0
