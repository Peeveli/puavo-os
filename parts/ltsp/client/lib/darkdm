#!/bin/bash

set -eu

darkdm_systeminfo()
{
  blockdevice_sda_size=$(facter blockdevice_sda_size \
    | awk '$1 ~ /^[0-9]+$/ { printf "%.0f GB\n", $1 / 1000000000 }')
  this_image=$(cat /etc/puavo-image/name)
  this_release=$(cat /etc/puavo-image/release)

  cat <<EOF
image:   ${this_image}
release: ${this_release}

bios:            $(facter bios_vendor) / $(facter bios_version)
blockdevice sda: $(facter blockdevice_sda_model) / ${blockdevice_sda_size}
cpu:             $(facter processorcount) CPUs / $(facter processor0)
memory:          $(facter memorysize)
network:         IP $(facter ipaddress) / MAC $(facter macaddress)
product:         $(facter manufacturer) / $(facter productname)
serial numbers:  $(facter serialnumber) (machine) / $(facter boardserialnumber) (board)
some pci devices:
$(lspci | awk '$2 == "Network" || $2 == "VGA"' | sed 's/^/  /')
EOF
}

darkdm_reboot()
{
    local i

    for i in $(seq 5 -1 1); do
        echo -n -e "\rRebooting in ${i}s. (Press Ctrl-C to cancel)"
        sleep 1 || return 1
    done
    echo -e "\rRebooting now!                              "

    reboot
}

darkdm_install()
{
    /usr/sbin/puavo-install "$@" || return 1

    darkdm_reboot
}

darkdm_print_help()
{
    cat <<'EOF'

Puavo OS Command Shell

Commands:
  build             - build Puavo OS image and poweroff
  install           - install Puavo OS to this device and reboot
  make-install-disk - make a bootable usb flash drive or some such
  nmtui             - configure network (not available on netboot devices)
  poweroff          - poweroff the system in 5 seconds
  preinstall        - install without registering
  preseed-install   - install with a preseed
  reboot            - reboot the system in 5 seconds
  shell             - spawn a shell
  update            - update the local Puavo OS installation and reboot
EOF
}

darkdm_shell()
{
    /bin/bash
}

darkdm_update()
{
    local image_name update_status

    update_status=0

    if image_name=$(cat /etc/puavo-image/name 2>/dev/null); then
      /usr/sbin/puavo-install-and-update-ltspimages \
	--install-from-nbd /dev/nbd0 "$image_name" || update_status=1
    else
      update_status=1
    fi

    if ! /usr/lib/puavo-ltsp-install/update-configuration >/dev/null 2>&1; then
      echo 'Configuration update FAILED!' >&2
      update_status=1
    else
      echo 'Configuration update OK.'
    fi

    if [ "$update_status" -ne 0 ]; then
      return "$update_status"
    fi

    darkdm_reboot
}

darkdm_poweroff()
{
    local i

    for i in $(seq 5 -1 1); do
        echo -n -e "\rPowering-off in ${i}s. (Press Ctrl-C to cancel)"
        sleep 1 || return 1
    done
    echo -e "\rPowering-off now!                              "

    poweroff
}

darkdm_build()
{
    /usr/lib/puavo-ltsp-client/handle-image-build-request || return 1

    darkdm_poweroff
}

darkdm_menu()
{
    local command
    local initial_command
    local prompt

    initial_command=$1
    shift

    while true; do
	echo "$systeminfo"
	darkdm_print_help

        if [ -n "$initial_command" ]; then
            prompt="[${initial_command}]> "
        else
            prompt='> '
        fi

	read -e -p "$prompt" command || return 1

	if [ -z "$command" -a -n "$initial_command" ]; then
	    command="$initial_command"
	fi

	case "${command}" in
	    'build')
		darkdm_build
		;;
            'install')
		darkdm_install
		;;
	    'make-install-disk')
		puavo-make-install-disk
		;;
	    'nmtui')
		if [ ! -x /usr/bin/nmtui ]; then
		    echo 'nmtui not available' >&2
		else
		    nmtui || true
		fi
		;;
	    'poweroff')
		darkdm_poweroff
		;;
            'preinstall')
		darkdm_install preinstall
		;;
            'preseed-install')
		darkdm_install preseed-install
		;;
	    'reboot')
		darkdm_reboot
		;;
	    'shell')
		darkdm_shell
		;;
	    'update')
		darkdm_update
		;;
	    *)
		echo "Error: Invalid command '${command}'." >&2
		;;
	esac
    done
}

darkdm_main()
{
    local hosttype
    local initial_command

    hosttype=$(cat /etc/puavo/hosttype)
    case "${hosttype}" in
	laptop|wirelessaccesspoint)
	    initial_command='update'
	    ;;
	unregistered)
	    initial_command='install'
	    ;;
	*)
	    initial_command=
	    ;;
    esac

    darkdm_menu "${initial_command}"
}

echo 'Gathering system information...'
echo
systeminfo=$(darkdm_systeminfo 2>/dev/null || true)

while true; do
    if darkdm_main; then
	echo 'Operation was a success.'
    else
	echo "Operation failed with error code $?."
    fi

    echo 'Press ENTER to continue.'
    read _
done
