#!/bin/sh

set -eu

grub_m4_template() {
  cat <<'EOF'
set default="0"
load_env

function load_video {
  if [ x$feature_all_video_module = xy ]; then
    insmod all_video
  else
    insmod efi_gop
    insmod efi_uga
    insmod ieee1275_fb
    insmod vbe
    insmod vga
    insmod video_bochs
    insmod video_cirrus
  fi
}

if loadfont unicode ; then
  set gfxmode=auto
  load_video
  insmod gfxterm
  set locale_dir=$prefix/locale
  set lang=fi_FI
  insmod gettext
fi
terminal_output gfxterm
set timeout=5
### END /usr/local/etc/grub.d/00_header ###

function get_kernelarch { regexp -s 2:"$2" '^(.*)-(i386|amd64)$' "$1"; }
function get_pathname { regexp -s 2:"$2" '^(\(.*\))?(/.*)$' "$1"; }

function get_kernelversion {
  if regexp -s 1:"$2" '^(.*)-(i386|amd64)$' "$1"; then
    :
  else
    set $2="$1"
  fi
}

function ltsp_image_entry {
  set imagefile="$1"

  if [ "$2" = "Abitti" ]; then
    set abitti=true
    set description="$2"
    set kernelparameters=""
    set imagepath="$3"
  else
    set abitti=false
    set description="$2"
    set kernelparameters="$3"
    get_pathname $imagefile imagepath
  fi

  # if changing menuentry description, update correspondingly on
  # (XXX currently not installed) puavo-local-config configure_grub_default()

  # ${puavo_kernel_arguments} comes from a grub environment file
  # (if it is defined there)
  set kernelparameters="${kernelparameters} ${puavo_kernel_arguments}"

  menuentry "${description} (${imagepath})" "$imagefile" "$imagepath" "$kernelparameters" "$abitti" {
    set imagefile="$2"
    set imagepath="$3"

    loopback loop "${imagefile}"
    set root='(loop)'

    #
    # this mirrors code in puavo-ltspboot-config (puavo-tftpd hook)
    #

    set use_if64cpu='false'

    # ${puavo_kernel_version} comes from a grub environment file
    # (if it is defined there)

    set kernel_version_suffix=''
    if test -n "${puavo_kernel_version}"; then
      if regexp -- '-(amd64|i386)$' "${puavo_kernel_version}"; then
        # kernel_version set to particular arch
        if test -e "(loop)/boot/vmlinuz-${puavo_kernel_version}"; then
          set kernel_version_suffix="-${puavo_kernel_version}"
        else
          true  # ... but kernel not available, so just use default
        fi
      elif test -e "(loop)/boot/vmlinuz-${puavo_kernel_version}-amd64" \
             -a -e "(loop)/boot/vmlinuz-${puavo_kernel_version}-i386"; then
        set use_if64cpu='true'
        set kernel_version_suffix="-${puavo_kernel_version}"
      elif test -e "(loop)/boot/vmlinuz-${puavo_kernel_version}"; then
        # no kernels for both archs, but some kernel exists, so use that
        set kernel_version_suffix="-${puavo_kernel_version}"
      else
        # requested kernel not found, use default
        true
      fi
    elif test -e '(loop)/boot/vmlinuz-amd64' \
           -a -e '(loop)/boot/vmlinuz-i386'; then
      set use_if64cpu='true'
    else
      true              # okay, just use default kernel
    fi

    if test "${use_if64cpu}" = 'true'; then
      if cpuid -l; then
        set kernel_version_suffix="${kernel_version_suffix}-amd64"
      else
        set kernel_version_suffix="${kernel_version_suffix}-i386"
      fi
    fi

    # one more sanity test (also checks the corresponding initrd.img)
    if test -e "(loop)/boot/initrd.img${kernel_version_suffix}" \
         -a -e "(loop)/boot/vmlinuz${kernel_version_suffix}"; then
      true      # all is okay
    else
      # something is wrong, use the default kernel
      set kernel_version_suffix=''
    fi

    set kernelparameters="$4"
    set abitti="$5"

    if [ "$abitti" = "true" ]; then
      linux /boot/vmlinuz${kernel_version_suffix} ro boot=live config security=apparmor digabidata digabi=syslinux union=overlay live-media=/dev/mapper/puavo-images live-media-path=/abitti live-boot.debug puavo.abitti.boot=true puavo.boot.plymouth.theme=joy ${kernelparameters}
    else
      linux /boot/vmlinuz${kernel_version_suffix} ro init=/sbin/init-puavo quiet splash puavo.hosttype=laptop root=/dev/mapper/puavo-images loop="${imagepath}" puavo.image.path="${imagepath}" ${kernelparameters}
    fi

    initrd /boot/initrd.img${kernel_version_suffix}

    loopback -d loop
  }
}

## Superlaptop mode = persistent image changes + local admins
function ltsp_image_entry_superlaptop {
  set imagefile="$1"
  set description="$2"
  set kernelparameters="$3"

  if test "${puavo_show_imageoverlays}" = "true" \
            -a -d (lvm/puavo-imageoverlays); then
    set kernelparameters="$kernelparameters puavo.image.overlay=personal"

    ltsp_image_entry "${imagefile}" "${description}" "${kernelparameters}"
  fi
}

insmod gzio
insmod part_msdos
insmod ext2
insmod squash4
insmod biosdisk
insmod regexp
insmod loopback
insmod usb_keyboard
insmod lvm
insmod jpeg
insmod png

for dev in (lvm/__PUAVO_LVM_PARTITION__); do
  for file in ${dev}/*.default; do
    regexp -s default_alias_no_suffix '^(.*)\.default$' "${file}"
    break
  done
  for file in ${dev}/*.backup; do
    regexp -s backup_alias_no_suffix '^(.*)\.backup$' "${file}"
    break
  done

  set default_image="${dev}/ltsp.img"
  set backup_image="${dev}/ltsp-backup.img"
  set default_image_alias="${default_alias_no_suffix}.img"
  set backup_image_alias="${backup_alias_no_suffix}.img"

  if test -f "${default_image}"; then
    ltsp_image_entry "${default_image}" "Normaali käynnistys - ${default_image_alias}"
    ltsp_image_entry_superlaptop "${default_image}" "Kehittäjätila - ${default_image_alias}"

    loopback default_image_loop "${default_image}"
    set possible_puavo_grub_theme_path="(default_image_loop)/boot/grub/themes/${puavo_grub_theme}/theme.txt"
    if test -f "${possible_puavo_grub_theme_path}"; then
      set theme="${possible_puavo_grub_theme_path}"
    fi
  fi
  if test -f "${backup_image}"; then
    ltsp_image_entry "${backup_image}" "Varajärjestelmä, normaali käynnistys - ${backup_image_alias}"
    ltsp_image_entry_superlaptop "${backup_image}" "Varajärjestelmä, kehittäjätila - ${backup_image_alias}"
  fi

  for file in ${dev}/*.img; do
    if test "${file}" = "${default_image}";       then continue; fi
    if test "${file}" = "${backup_image}";        then continue; fi
    if test "${file}" = "${default_image_alias}"; then continue; fi
    if test "${file}" = "${backup_image_alias}";  then continue; fi

    ltsp_image_entry "${file}" "Muu järjestelmä, normaali käynnistys"
    ltsp_image_entry_superlaptop "${file}" "Muu järjestelmä, kehittäjätila"
  done

  for file in ${dev}/abitti/abitti-v*.squashfs; do
    # If there are two abitti-images, do not show the menuentry because we
    # do not know what we get in the live-boot environment in this situation
    # (because we have no mechanism to choose a particular image).
    # This is mostly to stop admins doing unsupported things.
    if test -n "$abitti_image"; then
      set abitti_image=""
      break
    fi
    set abitti_image="${file}"
    regexp -s abitti_version_number 'abitti-v(.*)\.squashfs$' "${file}"
  done
  if test -f "${abitti_image}"; then
    ltsp_image_entry "${default_image}" \
                     "Abitti"           \
                     "versio ${abitti_version_number}"
  fi
done
EOF
}

lookup_windows_partition_number() {
  # Presume that the first partition not containing "Linux"
  # is a Windows-partition.
  _diskdev=$1
  env LANG=C fdisk -l "$_diskdev" \
    | awk '$1 ~ "^/dev/" && !/(Extended|Linux)/ {
	     if (match($1, /[0-9]+$/, _)) { print _[0]; exit }
           }'
}

usage() {
  cat <<EOF
$(basename $0) [optional arguments]

  $(basename $0) takes the following optional arguments:

    --grub-basedir       grubbasedir
    --hosttype           hosttype
    --images-dir         imagesdir
    --only-update-config
    --vgname             vgname
EOF
  exit 1
}

exitstatus=0

grub_basedir=''
hosttype=$(cat /etc/puavo/hosttype 2>/dev/null || true)
images_dir=/images
only_update_config=false
vgname=puavo

if ! args=$(getopt -n "$0" -o +                                          \
                   -l 'grub-basedir:,hosttype:,images-dir:,only-update-config,vgname:' \
                   -- "$@"); then
  usage
fi

eval "set -- $args"
while [ $# -ne 0 ]; do
  case "$1" in
    --grub-basedir)       grub_basedir=$2;         shift; shift ;;
    --hosttype)           hosttype=$2;             shift; shift ;;
    --images-dir)         images_dir=$2;           shift; shift ;;
    --only-update-config) only_update_config=true; shift        ;;
    --vgname)             vgname=$2;               shift; shift ;;
    --) shift; break ;;
    *)  usage ;;
  esac
done

[ $# -eq 0 ] || usage

if [ ! -d "$images_dir" ]; then
  echo "'$images_dir' is not a directory" >&2
  exit 1
fi

if [ -z "$hosttype" ]; then
  echo 'Hosttype is not set' >&2
  exit 1
fi

# pvs and assorted utilities complain if we leak file descriptors, that is
# why we do "3>&- 4>&- 5>&-" (same with grub-install)
diskdev=$(pvs 3>&- 4>&- 5>&-                                            \
            | awk -v vgname="$vgname" '$2 == vgname { print $1; exit }' \
            | sed -E '
                /\/dev\/mmcblk/ { s|p[0-9]+$|| }
                /\/dev\/nvme/   { s|p[0-9]+$|| }
                /\/dev\/[vs]d/  { s|[0-9]+$||  }
              ')

if [ -z "$diskdev" ]; then
  echo "Could not find the disk device where volume group '${vgname}' is" >&2
  exit 1
fi

if [ "$hosttype" = 'diskinstaller' ]; then
  puavo_lvm_partition='puavoinstaller-installimages'
else
  puavo_lvm_partition='puavo-images'
fi

# loop= parameter is legacy and is meant for the old Trusty-based Puavo-systems.
common_kernel_arguments="puavo.hosttype=${hosttype} root=/dev/mapper/${puavo_lvm_partition} loop=\"\${imagepath}\" puavo.image.path=\"\${imagepath}\""

case "$hosttype" in
  diskinstaller|preinstalled|wirelessaccesspoint)
    puavo_kernel_arguments="$common_kernel_arguments"
    ;;
  laptop)
    puavo_kernel_arguments="quiet splash ${common_kernel_arguments}"
    ;;
  *)
    echo "Hosttype '$hosttype' is not supported" > /dev/stderr
    exit 1
    ;;
esac

if ! $only_update_config; then
  grub_install_args=
  if [ -n "$grub_basedir" ]; then
    grub_install_args="--directory=${grub_basedir}/usr/lib/grub/i386-pc --locale-directory=${grub_basedir}/usr/share/locale"
  fi
  if ! grub_msg=$(${grub_basedir}/usr/sbin/grub-install \
    --boot-directory=${images_dir}/boot $grub_install_args "$diskdev" \
      3>&- 4>&- 5>&- 2>&1); then
        echo "Grub installation failed: $grub_msg" >&2
        exit 1
  fi

  "${grub_basedir}/usr/sbin/grub-install" --version \
    | awk '{ print $3 }' > "${images_dir}/boot/grub/version.tmp"
  if [ ! -s "${images_dir}/boot/grub/version.tmp" ]; then
    echo 'Could not determine new grub version' >&2
    rm -f "${images_dir}/boot/grub/version.tmp"
    exitstatus=1
  else
    mv "${images_dir}/boot/grub/version.tmp" "${images_dir}/boot/grub/version"
    echo "Grub has been installed to ${diskdev}."
  fi
fi

grub_cfg_path="${images_dir}/boot/grub/grub.cfg"
tmp_grub_cfg_path="${grub_cfg_path}.tmp"

grub_m4_template                                              \
  | m4 -D__PUAVO_KERNEL_ARGUMENTS__="$puavo_kernel_arguments" \
       -D__PUAVO_LVM_PARTITION__="$puavo_lvm_partition"       \
  > "$tmp_grub_cfg_path"

windows_partition_number=$(lookup_windows_partition_number "$diskdev")

if [ -n "$windows_partition_number" ]; then
  cat <<EOF >> "$tmp_grub_cfg_path"

menuentry "Windows" {
  insmod ntfs
  set root=(hd0,$windows_partition_number)
  chainloader +1
}
EOF
fi


if cmp "$grub_cfg_path" "$tmp_grub_cfg_path" >/dev/null 2>&1; then
  rm -f "$tmp_grub_cfg_path"
else
  mv "$tmp_grub_cfg_path" "$grub_cfg_path"
fi

# We have got some weird spurious grub errors of the sort (at first boot):
# "error: ELF header smaller than expected", so we play it safe
# and try weird tricks to flush all caches to actual, physical disk.
# But we are not quite sure yet this will actually work (the problem is
# difficult to reproduce).
sync
echo 3 > /proc/sys/vm/drop_caches
blockdev --flushbufs $diskdev

case "$diskdev" in
  /dev/[vs]d*)
    hdparm -qF "$diskdev"
    ;;
esac

exit $exitstatus
