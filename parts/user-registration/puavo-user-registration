#!/usr/bin/python3

# New user registration program, v2.0

import os
import logging
import argparse
import subprocess
import socket
import gettext
import sys

import gi

gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, Gdk, GdkPixbuf, Gio

gettext.bindtextdomain('puavo-user-registration', '/usr/share/locale')
gettext.textdomain('puavo-user-registration')
_tr = gettext.gettext

sys.path.append('/usr/share/puavo-user-registration')

import utils
import privacy_policy
from page_welcome import PageWelcome
from page_network import PageNetwork
from page_account import PageAccount
from page_complete import PageComplete


# ==============================================================================
# ==============================================================================


def disable_registration_window(is_production):
    cmd = ['sudo', '-n',
           '/usr/sbin/puavo-conf-local',
           'puavo.xsessions.user_registration.enabled',
           'false']

    logging.info('disable_registration_window(): running "%s"', cmd)

    if is_production:
        subprocess.check_call(cmd)


def login_locally(parent, username, password, is_production):
    if not is_production:
        logging.info('login_locally(): setting up local login, ' \
                     'username="%s", password="%s"', username, password)
        return

    logging.info('login_locally(): setting up local login, username="%s"', username)

    error_msg = None

    if not (username and password):
        error_msg = _tr('internal error: username and password missing')

    if not error_msg:
        try:
            cmd = ['sudo', '-n',
                   '/usr/lib/puavo-ltsp-client/firstlogin-to-account',
                   username]

            proc = subprocess.Popen(cmd,
                                    stdin=subprocess.PIPE,
                                    stdout=subprocess.DEVNULL,
                                    stderr=subprocess.DEVNULL)

            proc.stdin.write(password.encode())
            proc.stdin.close()
            proc.wait()

            if proc.returncode != 0:
                error_msg \
                  = _tr('Could not do initial login with new user' \
                        ' credentials.  Please remember your username' \
                        ' "%s" for the first login.  Contact support if' \
                        ' there are problems.') % username
        except Exception as exc:
            logging.fatal(str(exc), exc_info=True)
            error_msg = _tr('Unknown login error:') + '\n\n' + str(exc)

    if error_msg:
        utils.show_error_message(parent, _tr('Error'), error_msg)


# ==============================================================================
# ==============================================================================


class NewUserRegistrationWindow:
    def __init__(self, application, settings):
        self.application = application

        self.data_dir = settings['data_dir']
        self.prod_mode = settings['prod_mode']
        self.machine_password = settings['machine_password']

        self.page_definitions = [
            (PageWelcome),
            (PageNetwork),
            (PageAccount),
            (PageComplete),
        ]

        self.all_pages = []
        self.current_page = None

        # Unfortunately, we're still plagued by the same problem
        # the previous version had: we have to adjust font sizes
        # and other scales for various screen sizes.

        # The entry font sizes WILL vary slightly if you keep
        # clicking prev/next. I don't know why :-(

        try:
            screen_width = Gdk.Screen.get_default().width()
        except Exception as exc:
            logging.warning('Unable to determine the screen width:')
            logging.warning(str(exc))
            screen_width = 1366

        if not self.prod_mode:
            screen_width = 1366
            screen_height = 768

        if screen_width == 1920:
            css_variables = {
                'gtk_dialog_font_scale': '150%',
                'main_font_scale': '200%',
                'background_image': 'background_1920.png',

                'welcome_padding_top': '75px',
                'welcome_padding_left': '250px',
                'welcome_padding_right': '50px',

                'network_container_left': '150px',

                'account_top_padding': '75px',
                'account_left_padding': '500px',

                'complete_top_padding': '200px',
                'complete_left_padding': '250px',

                'entry_font_size': '28px',
            }
        elif screen_width in (1600, 1680):
            # Weirdo resolutions we see sometimes. The background
            # image overlaps the text badly, though.
            css_variables = {
                'gtk_dialog_font_scale': '120%',
                'main_font_scale': '150%',
                'background_image': 'background_1920.png',

                'welcome_padding_top': '150px',
                'welcome_padding_left': '250px',
                'welcome_padding_right': '50px',

                'network_container_left': '150px',

                'account_top_padding': '50px',
                'account_left_padding': '600px',

                'complete_top_padding': '200px',
                'complete_left_padding': '250px',

                'entry_font_size': '20px',
            }
        elif screen_width == 1024:
            # A virtual machine?
            css_variables = {
                'gtk_dialog_font_scale': '100%',
                'main_font_scale': '100%',
                'background_image': 'background_1366.png',

                'welcome_padding_top': '100px',
                'welcome_padding_left': '100px',
                'welcome_padding_right': '100px',

                'network_container_left': '50px',

                'account_top_padding': '50px',
                'account_left_padding': '400px',

                'complete_top_padding': '100px',
                'complete_left_padding': '50px',

                'entry_font_size': '15px',
            }
        else:
            css_variables = {
                'gtk_dialog_font_scale': '110%',
                'main_font_scale': '110%',
                'background_image': 'background_1366.png',

                'welcome_padding_top': '75px',
                'welcome_padding_left': '250px',
                'welcome_padding_right': '50px',

                'network_container_left': '150px',

                'account_top_padding': '25px',
                'account_left_padding': '550px',

                'complete_top_padding': '100px',
                'complete_left_padding': '250px',

                'entry_font_size': '16px',
            }

        css_variables['background_image'] = \
            os.path.join(self.data_dir, css_variables['background_image'])

        try:
            # Load the main UI file
            self.main_builder = Gtk.Builder()
            self.main_builder.set_translation_domain('puavo-user-registration')
            self.main_builder.add_from_file(os.path.join(self.data_dir,
                                                         'main_window.glade'))

            # Load custom CSS
            css = open(os.path.join(self.data_dir, 'main_window.css')).read()

            for key, value in css_variables.items():
                css = css.replace('$(' + key + ')', str(value))

            style_provider = Gtk.CssProvider()
            style_provider.load_from_data(bytes(css, 'utf-8'))

            Gtk.StyleContext.add_provider_for_screen(
                Gdk.Screen.get_default(),
                style_provider,
                Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)

            # Setup event handling
            self.main_builder.connect_signals(self)

        except Exception as exc:
            logging.fatal(str(exc), exc_info=True)
            return

        self.main_window = self.main_builder.get_object('main_window')
        self.main_window.set_application(self.application)
        self.main_window.set_icon_name('user-info')

        if self.prod_mode:
            self.main_window.fullscreen()
            self.main_window.set_skip_taskbar_hint(True)
            self.main_window.set_skip_pager_hint(True)
            self.main_window.set_deletable(False)
            self.main_window.set_decorated(False)
        else:
            self.main_window.set_size_request(screen_width, screen_height)

        # If we have a privacy policy, show the button
        self.__privacy_policy_file = \
            os.path.realpath(os.path.join(self.data_dir, 'privacy_policy.html'))

        if os.path.exists(self.__privacy_policy_file):
            logging.info('Privacy policy file "%s" exists', self.__privacy_policy_file)
            self.main_builder.get_object('privacy_policy').show()

        # Try to set the lower corner logo
        self.__logo_file = os.path.realpath(os.path.join(self.data_dir, 'lower_logo.png'))

        if os.path.exists(self.__logo_file):
            logging.info('Lower corner logo file "%s" exists', self.__logo_file)

            logo = self.main_builder.get_object('logo')

            try:
                pixbuf = \
                    GdkPixbuf.Pixbuf.new_from_file_at_scale(
                        filename=self.__logo_file,
                        width=-1,
                        height=32,
                        preserve_aspect_ratio=True)

                logo.set_from_pixbuf(pixbuf)
                logo.show()
            except Exception as exc:
                logo.hide()
                logging.error('Could not set the lower corner logo image:')
                logging.error(str(exc), exc_info=True)

        self.main_title = self.main_builder.get_object('main_title')

        self.desktop_button = self.main_builder.get_object('go_to_desktop')

        middle_box = self.main_builder.get_object('middle_box')
        middle_box.show_all()

        # Build the child pages
        try:
            for ctor in self.page_definitions:
                self.all_pages.append(ctor(self,
                                           self.main_window,
                                           middle_box,
                                           self.data_dir))
        except Exception as exc:
            logging.error(str(exc), exc_info=True)
            self.main_window.destroy()
        else:
            # Activate the initial page
            self.goto_page(0)

        self.main_window.show()


    def close(self, *args):
        self.main_window.destroy()


    def go_to_desktop_clicked(self, *args):
        dialog = Gtk.MessageDialog(parent=self.main_window,
            message_type=Gtk.MessageType.WARNING,
            buttons=Gtk.ButtonsType.OK_CANCEL, text=_tr('Go to desktop?'))

        dialog.format_secondary_text( \
            _tr('Are you sure you do not want to create a user account?  ' \
                'Without a user account, your files will be lost after your ' \
                'desktop session ends.'))

        response = dialog.run()
        dialog.destroy()

        if response == Gtk.ResponseType.OK:
            self.main_window.destroy()


    # Show the privacy policy dialog
    def privacy_policy_clicked(self, *args):
        dlg = privacy_policy.PrivacyPolicy(self.main_window, self.__privacy_policy_file)
        dlg.run()
        dlg.destroy()


    # Called from account creation page when the process is complete.
    # Saves the username and password, so they can be used.
    def save_user_details(self, username, password):
        # These variables are undefined unless this method is called,
        # so if someone calls finish_registration() without calling
        # this method first, the process ends in a fatal error.
        self.username = username
        self.password = password


    # Called from the "complete" page to finish up the operation
    def finish_registration(self):
        try:
            logging.info('Finishing up the registration process')

            disable_registration_window(self.prod_mode)

            login_locally(self.main_window,
                          self.username, self.password,
                          self.prod_mode)

            logging.info('Rebooting now')

            if self.prod_mode:
                subprocess.run(['systemctl', 'reboot', '-i'])

            self.main_window.destroy()

        except Exception as exc:
            logging.error(str(exc), exc_info=True)

            utils.show_error_message( \
                self.main_window,
                _tr('Fatal Error'),
                _tr('Could not finish the registration process.  Please contact support.'))


    # Returns the machine data needed on the accounts page, when sending
    # data to the server
    def get_machine_data(self):
        if self.prod_mode:
            return {
                'dn': open('/etc/puavo/ldap/dn', 'rb').read().decode('utf-8').strip(),
                'password': self.machine_password,
                'hostname': socket.gethostname(),
            }
        else:
            return {
                # this machine does not exist anywhere, development purposes only
                'dn': 'puavoId=37,ou=Devices,ou=Hosts,dc=edu,dc=hogwarts,dc=fi',
                'password': self.machine_password,
                'hostname': 'laptop1',
            }

    def previous_page(self):
        next_page = self.current_page - 1

        if next_page < 0:
            next_page = len(self.page_definitions) - 1

        self.goto_page(next_page)


    def next_page(self):
        next_page = (self.current_page + 1) % len(self.page_definitions)
        self.goto_page(next_page)


    def goto_page(self, page_num):
        if page_num == self.current_page:
            return

        # Hide the previous page first
        if self.current_page is not None:
            self.all_pages[self.current_page].deactivate()

        self.current_page = page_num

        # Update the main title
        title = self.all_pages[self.current_page].get_main_title()

        if title is None:
            self.main_title.hide()
        else:
            self.main_title.set_label(str(title))
            self.main_title.show()

        # Some pages disable the "Go to desktop" button
        self.desktop_button.set_sensitive(self.all_pages[self.current_page].enable_desktop_button())

        # Switch the page
        self.all_pages[self.current_page].activate()


class UserRegistrationApplication(Gtk.Application):
    def __init__(self, application_id, flags, settings):
        Gtk.Application.__init__(self, application_id=application_id, flags=flags)
        self.connect('activate', self.new_window, settings)


    def new_window(self, *args):
        NewUserRegistrationWindow(self, args[1])


# ==============================================================================
# ==============================================================================

# Handle command-line arguments
parser = argparse.ArgumentParser(
    formatter_class=argparse.RawDescriptionHelpFormatter)

parser.add_argument('--prod',
                    action='store_true',
                    required=False,
                    help='enable production mode')

parser.add_argument('--at-session-startup',     # backwards compat only
                    action='store_true',
                    required=False,
                    help='')

args = parser.parse_args()

prod_mode = args.prod or args.at_session_startup

# Setup logging
if prod_mode:
    logging.basicConfig(filename='/tmp/register.log',
                        format='%(asctime)s %(levelname)s: %(message)s',
                        level=logging.DEBUG)
else:
    logging.basicConfig(format='%(asctime)s %(levelname)s: %(message)s',
                        level=logging.DEBUG)

try:
    if prod_mode:
        get_password_cmd = ['sudo', '-n', 'cat', '/etc/puavo/ldap/password']
        host_ldap_password = subprocess.check_output(get_password_cmd).decode('utf-8').strip()
    else:
        # this password is a randomly generated string, the "machine"
        # does not actually exist
        host_ldap_password = '7nj7am5d09kug3ed4g24z3zx3x6pek09ybrdbfrd'
except subprocess.CalledProcessError:
    errmsg = _tr('You do not have the required permissions to use this tool.')
    utils.show_error_message(None, _tr('No permissions'), errmsg)
    exit(1)

settings = {
    'prod_mode': prod_mode,
    'machine_password': host_ldap_password,
}

if prod_mode:
    settings['data_dir'] = '/usr/share/puavo-user-registration/data'
else:
    settings['data_dir'] = './data'

try:
    app = UserRegistrationApplication('opinsys.new_user_registration',
                                      Gio.ApplicationFlags.FLAGS_NONE,
                                      settings)

    app.run()
except Exception as exc:
    logging.fatal('TOP-LEVEL EXCEPTION CAUGHT')
    logging.fatal(str(exc), exc_info=True)
    exit(1)
