#!/usr/bin/ruby

require "erb"
require 'readline'
require 'ldap'
require 'open3'
require 'tempfile'
require 'yaml'

require 'puavo/etc'
require 'puavo/execute'


organisation_name = ARGV.first

if organisation_name.nil? || organisation_name.empty? then
  warn "Usage: #{ $0 } organisation|--all"
  exit 1
end

puts "******************************************************"
puts "  Initialising organisation: #{organisation_name}"
puts "******************************************************"

puts "#{PUAVO_ETC.ldap_dn} password:"
@bindpw = Readline.readline('> ', true)

def update_acls(suffix)
  dn = ""
  domain = ""
  samba_domain = ""
  kerberos_realm = ""

  conn = LDAP::SSLConn.new(host=PUAVO_ETC.ldap_master, port=636)
  conn.set_option(LDAP::LDAP_OPT_PROTOCOL_VERSION, 3)


  ldap_search = false
  while ldap_search != true
    begin
      # COMMAND
      conn.bind(PUAVO_ETC.ldap_dn, @bindpw) do
        conn.search("cn=config", LDAP::LDAP_SCOPE_SUBTREE, "(olcSuffix=#{suffix})") {|e|
          dn = e.dn
          puts "DN: #{dn}"
        }

        conn.search(suffix, LDAP::LDAP_SCOPE_BASE, "(objectClass=eduOrg)") {|e|
          samba_domain = e.get_values('sambaDomainName')[0]
          kerberos_realm = e.get_values('puavoKerberosRealm')[0]
          domain = e.get_values('puavoDomain')[0]
        }
      end
      ldap_search = true
    rescue LDAP::ResultError => e
      warn "LDAP connection failed: #{ e.message }"
      warn "Press enter to try again"
      STDIN.gets
    end
  end

  puts
  puts "suffix:         #{suffix}"
  puts "Domain:         #{domain}"
  puts "Kerberos realm: #{kerberos_realm}"
  puts "Samba domain:   #{samba_domain}"

  if samba_domain.eql?("") or kerberos_realm.eql?("") or domain.eql?("")
    puts "ERROR: Couldn't figure out domain information!"
    exit
  end

  Readline.readline('OK?', true)

  Tempfile.create do |tmpfile|
    tmpfile.write "dn: #{ dn }\n"
    tmpfile.write "changetype: modify\n"
    tmpfile.write "replace: olcAccess\n"

    acls, stderr_str, status \
      = Open3.capture3('puavo-print-acls', suffix, samba_domain)
    unless status.success? then
      errmsg = "puavo-print-acls returned status code #{ status.exitstatus }" \
                 + " with the following errors:\n#{ stderr_str }"
      raise errmsg
    end
    tmpfile.write acls
    tmpfile.close

    Puavo::Execute.run(
      [ 'ldapmodify',
        '-c',
        '-h', PUAVO_ETC.ldap_master,
        '-x',
        '-D', PUAVO_ETC.ldap_dn,
        '-Z',
        '-w', @bindpw,
        '-f', tmpfile.path ])
  end
end

if organisation_name.eql?("--all")
  conn = LDAP::SSLConn.new(host=PUAVO_ETC.ldap_master, port=636)
  conn.set_option(LDAP::LDAP_OPT_PROTOCOL_VERSION, 3)

  conn.bind(PUAVO_ETC.ldap_dn, @bindpw) do
    begin
      puts "Looping through databases"

      conn.search("", LDAP::LDAP_SCOPE_BASE, "(objectClass=*)", ["namingContexts"]) {|e|
        e.get_values("namingContexts").each {|suffix|
          if !suffix.eql?("o=puavo")
            update_acls(suffix)
          end
        }
      }

      rescue LDAP::ResultError => e
        warn "LDAP connection failed: #{ e.message }"
      end
  end
else
  # Suffix for single organisation is determined using template

  organisation_base_template = "dc=edu,dc=%s,dc=fi"
  suffix = organisation_base_template % organisation_name

  update_acls(suffix)
end
