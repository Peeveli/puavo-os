#!/bin/sh

set -eu

ebs_status=0

# from /usr/sbin/puavo-install-and-update-ltspimages
lookup_image_server_by_dns() {
  read puavo_domain < /etc/puavo/domain

  host -t SRV -W 5 "_imageserver._tcp.${puavo_domain}" \
    | awk -v puavo_domain="$puavo_domain" '
        $2 == "has" && $3 == "SRV" && $4 == "record" {
          sub(/\.$/, "", $8)

          # check that $8 has puavo_domain-suffix
          i = index($8, puavo_domain)
          if (i == 0) { next }
          if ($8 == (substr($8, 0, i-1) puavo_domain)) {
            printf "%s:%s\n", $8, $7
            exit(0)
          }
      }'
}

generate_possible_ebs_names() {
  preferred_image=$1

  imagename=$(awk '{ sub(/\.img$/, "", $1); print $1 }' /etc/puavo-image/name)
  if [ -z "$imagename" ]; then
    echo 'Could not determine image name from /etc/puavo-image/name' >&2
    return 1
  fi

  {
    echo "$imagename"
    if [ -n "$preferred_image" -a "$preferred_image" != "$imagename" ]; then
      echo "$preferred_image"
    fi
  } | awk '{

        a_count = split($1, a, "-")
        for (i = 1; i <= a_count; i++) {
          for (j = 1; j <= i; j++) {
            printf "%s%s", a[j], (i == j ? "" : "-")
          }
          print ""
        }
      }' \
    | sort -u \
    | awk '{ print $1 ".ebs" }'
}

fetch_with_curl() {
  curl_ebs_server=$1
  curl_ebs_filename=$2
  curl_ebs_filepath=$3

  curl --cacert /etc/puavo/certs/rootca.pem                  \
       --fail                                                \
       --max-time 10                                         \
       --silent                                              \
       -o "$curl_ebs_filepath"                               \
       -w %{http_code}                                       \
       "https://${curl_ebs_server}/ebs/${curl_ebs_filename}"
}

try_fetching() {
  ebs_server=$1
  ebs_filename=$2
  ebs_targetpath=$3
  ebs_tmppath="${ebs_targetpath}.tmp"

  if ! status_code=$(fetch_with_curl "$ebs_server"   \
                                     "$ebs_filename" \
                                     "$ebs_tmppath"); then
    rm -f "$ebs_tmppath"
    if [ "$status_code" != '404' ]; then
      echo "Curl error when fetching ${ebs_filename}" >&2
      return 1
    fi

    if [ -e "$ebs_targetpath" ]; then
      rm -f "$ebs_targetpath"
      echo "Removed ${ebs_targetpath} because it was not found on server"
    fi
    return 0    # 404 is normal
  fi

  mv "$ebs_tmppath" "$ebs_targetpath" || return 1

  echo "Fetched ${ebs_filename} from ${ebs_server} to ${ebs_targetpath}"

  chmod 755 "$ebs_targetpath" || return 1

  return 0
}

fetch_extra_boot_scripts() {
  preferred_image=$1

  mkdir -p /state/ebs

  ebs_server=$(lookup_image_server_by_dns)
  if [ -z "$ebs_server" ]; then
    echo 'Failed to lookup image server from DNS' >&2
    return 1
  fi

  for ebs_filename in $(generate_possible_ebs_names "$preferred_image"); do
    try_fetching "$ebs_server" "$ebs_filename" "/state/ebs/${ebs_filename}" \
      || ebs_status=1
  done
}

execute_extra_boot_scripts() {
  for ebs_filename in $(generate_possible_ebs_names ''); do
    if [ -s "/state/ebs/${ebs_filename}" ]; then
      echo "======= EXECUTING /state/ebs/${ebs_filename}"
      cat "/state/ebs/${ebs_filename}"
      # execute an extra boot script:
      if "/state/ebs/${ebs_filename}"; then
        echo "------- /state/ebs/${ebs_filename} executed OK"
      else
        echo "------- /state/ebs/${ebs_filename} returned an error code $?" >&2
        ebs_status=1
      fi
    fi
  done
}

mode=${1:-}
case "$mode" in
  --execute-only)
    execute_extra_boot_scripts || ebs_status=1
    ;;
  --fetch-and-execute)
    fetch_extra_boot_scripts '' || ebs_status=1
    execute_extra_boot_scripts  || ebs_status=1
    ;;
  --fetch-only)
    preferred_image=$(puavo-conf puavo.image.preferred)
    fetch_extra_boot_scripts "$preferred_image" || ebs_status=1
    ;;
  *)
    cat <<EOF >&2
Unknown mode '$mode'
Usage: $(basename $0) --execute-only|--fetch-and-execute|--fetch-only
EOF
    exit 1
    ;;
esac

if [ "$ebs_status" != 0 ]; then
  echo 'Error in fetching/executing extra boot scripts' >&2
fi

exit $ebs_status
