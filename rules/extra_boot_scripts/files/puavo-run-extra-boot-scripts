#!/bin/bash

# using bash so we can use "wait" with -n

set -eu

ebs_status=0

# from /usr/sbin/puavo-install-and-update-ltspimages
lookup_image_server_by_dns() {
  read puavo_domain < /etc/puavo/domain

  host -t SRV -W 5 "_imageserver._tcp.${puavo_domain}" \
    | awk -v puavo_domain="$puavo_domain" '
        $2 == "has" && $3 == "SRV" && $4 == "record" {
          sub(/\.$/, "", $8)

          # check that $8 has puavo_domain-suffix
          i = index($8, puavo_domain)
          if (i == 0) { next }
          if ($8 == (substr($8, 0, i-1) puavo_domain)) {
            printf "%s:%s\n", $8, $7
            exit(0)
          }
      }'
}

generate_possible_ebs_names() {
  preferred_image=$1

  imagename=$(awk '{ sub(/\.img$/, "", $1); print $1 }' /etc/puavo-image/name)
  if [ -z "$imagename" ]; then
    echo 'could not determine image name from /etc/puavo-image/name' >&2
    return 1
  fi

  # allow additional scripts (that may be host or group-specific)
  ebs_prefixes=$(puavo-conf puavo.admin.extra_boot_script.prefixes)

  {
    echo "$imagename"
    if [ -n "$preferred_image" -a "$preferred_image" != "$imagename" ]; then
      echo "$preferred_image"
    fi
  } | awk '{
        a_count = split($1, a, "-")
        for (i = 1; i <= a_count; i++) {
          for (j = 1; j <= i; j++) {
            printf "%s%s", a[j], (i == j ? "" : "-")
          }
          print ""
        }
      }' \
    | sort -u \
    | awk -v ebs_prefixes_string="$ebs_prefixes" '
        BEGIN {
          split(ebs_prefixes_string, extra_ebs_prefixes)
          for (i in extra_ebs_prefixes) {
            if (extra_ebs_prefixes[i] == "default") { continue }
            print extra_ebs_prefixes[i] ".ebs"
          }
        }
        {
          for (i in extra_ebs_prefixes) {
            prefix = (extra_ebs_prefixes[i] == "default") \
                       ? "" : (extra_ebs_prefixes[i] "-" )
            print prefix $1 ".ebs"
          }
        }'
}

fetch_with_curl() {
  curl_ebs_server=$1
  curl_ebs_filename=$2
  curl_ebs_filepath=$3

  curl --cacert /etc/puavo/certs/rootca.pem                  \
       --fail                                                \
       --max-time 10                                         \
       --silent                                              \
       -o "$curl_ebs_filepath"                               \
       -w %{http_code}                                       \
       "https://${curl_ebs_server}/ebs/${curl_ebs_filename}"
}

try_fetching() {
  ebs_server=$1
  ebs_filename=$2
  ebs_targetpath=$3
  gnupg_verify=$4

  if $gnupg_verify; then
    ebs_filename="${ebs_filename}.asc"
  fi

  ebs_tmppath="${ebs_targetpath}.tmp"

  if ! status_code=$(fetch_with_curl "$ebs_server"   \
                                     "$ebs_filename" \
                                     "$ebs_tmppath"); then
    rm -f "$ebs_tmppath"
    if [ "$status_code" != '404' ]; then
      echo "curl error when fetching ${ebs_filename}" >&2
      return 1
    fi

    if [ -e "$ebs_targetpath" ]; then
      rm -f "$ebs_targetpath"
      echo "removed ${ebs_targetpath} because it was not found on server"
    fi
    return 0    # 404 is normal
  fi

  if $gnupg_verify; then
    verified_ebs_tmppath="${ebs_tmppath}.verified"
    exec 3< /root/.ebs-gnupg
    if ! flock -w 10 -x 3; then
      echo 'could not lock /root/.ebs-gnupg for gpg verification' >&2
      return 1
    fi
    if gpg --decrypt --homedir /root/.ebs-gnupg "$ebs_tmppath" 2>/dev/null \
         > "$verified_ebs_tmppath"; then
      mv "$verified_ebs_tmppath" "$ebs_tmppath"
      verified_msg='(verified)'
    else
      echo "verification failed for ${ebs_targetpath}" || true
      rm -f "$verified_ebs_tmppath" "$ebs_tmppath" || true
      flock -u 3
      return 1
    fi
    flock -u 3
  else
    verified_msg='(not verified)'
  fi

  mv "$ebs_tmppath" "$ebs_targetpath" || return 1

  echo "fetched ${ebs_filename} from ${ebs_server} to ${ebs_targetpath}" \
       $verified_msg

  chmod 755 "$ebs_targetpath" || return 1

  return 0
}

is_test_ebs() {
  case "$1" in
    test*.ebs|test-*.ebs) return 0 ;;
  esac
  return 1
}

delete_removed_ebs_files() {
  all_possible_ebs_names=$1

  for ebs_filepath in /state/ebs/*.ebs; do
    test -e "$ebs_filepath" || continue
    ebs_filename=$(basename "$ebs_filepath")
    if ! echo "$all_possible_ebs_names" | grep -Fqx "$ebs_filename"; then
      if is_test_ebs "$ebs_filename"; then continue; fi
      rm -f "$ebs_filename"
    fi
  done
}

fetch_extra_boot_scripts() {
  preferred_image=$1

  fetch_status=0

  mkdir -p /state/ebs

  if [ -e /run/puavo/nbd-server ]; then
    ebs_server=$(lookup_image_server_by_dns)
    gnupg_verify=false
  else
    ebs_server=$(puavo-conf puavo.image.servers | awk '{ print $1 }')
    if [ -z "$ebs_server" ]; then
      read topdomain < /etc/puavo/topdomain
      ebs_server="images.${topdomain}"
    fi
    gnupg_verify=true
  fi

  if [ -z "$ebs_server" ]; then
    echo 'failed to lookup image server from DNS' >&2
    return 2
  fi

  is_bootserver=false
  if [ "$(puavo-conf puavo.hosttype)" = 'bootserver' ]; then
    is_bootserver=true
  fi

  if $is_bootserver; then
    possible_ebs_names=$(
      rsync --list-only "rsync://${ebs_server}/images/ebs/*.ebs.asc" \
         | awk '{ sub(/.asc$/, "", $5); print $5 }')
    delete_removed_ebs_files "$possible_ebs_names"
  else
    possible_ebs_names=$(generate_possible_ebs_names "$preferred_image")
  fi

  for ebs_filename in $possible_ebs_names; do
    if $gnupg_verify && is_test_ebs "$ebs_filename"; then
      continue
    fi
    try_fetching "$ebs_server" "$ebs_filename" "/state/ebs/${ebs_filename}" \
                 "$gnupg_verify" &
  done

  while true; do
    if wait -n; then
      :
    elif [ $? -eq 127 ]; then
      break
    else
      fetch_status=1
    fi
  done

  if $is_bootserver; then
    rsync -a --delete --exclude='test.ebs' --exclude='test-*.ebs' \
          /state/ebs/ /images/ebs/
  fi

  return $fetch_status
}

execute_extra_boot_scripts() {
  for ebs_filename in $(generate_possible_ebs_names ''); do
    if [ -s "/state/ebs/${ebs_filename}" ]; then
      echo "======= /state/ebs/${ebs_filename}"
      cat "/state/ebs/${ebs_filename}"
      echo '------- EXECUTING'
      # execute an extra boot script:
      if "/state/ebs/${ebs_filename}"; then
        echo "------- /state/ebs/${ebs_filename} executed OK"
      else
        echo "------- /state/ebs/${ebs_filename} returned an error code $?" >&2
        ebs_status=1
      fi
    fi
  done
}

mode=${1:-}
case "$mode" in
  --execute-only)
    execute_extra_boot_scripts || ebs_status=1
    ;;
  --fetch-and-execute)
    fetch_extra_boot_scripts '' || ebs_status=$?
    execute_extra_boot_scripts  || ebs_status=1
    ;;
  --fetch-only)
    preferred_image=$(puavo-conf puavo.image.preferred)
    fetch_extra_boot_scripts "$preferred_image" || ebs_status=$?
    ;;
  *)
    cat <<EOF >&2
Unknown mode '$mode'
Usage: $(basename $0) --execute-only|--fetch-and-execute|--fetch-only
EOF
    exit 1
    ;;
esac

if [ "$ebs_status" != 0 ]; then
  echo 'error in fetching/executing extra boot scripts' >&2
fi

exit $ebs_status
